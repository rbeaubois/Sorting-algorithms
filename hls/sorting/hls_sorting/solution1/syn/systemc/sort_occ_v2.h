// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sort_occ_v2_HH_
#define _sort_occ_v2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct sort_occ_v2 : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<16> > array_src_address0;
    sc_out< sc_logic > array_src_ce0;
    sc_in< sc_lv<32> > array_src_q0;
    sc_out< sc_lv<16> > array_dst_address0;
    sc_out< sc_logic > array_dst_ce0;
    sc_out< sc_logic > array_dst_we0;
    sc_out< sc_lv<32> > array_dst_d0;
    sc_in< sc_lv<6> > shift;
    sc_out< sc_lv<8> > count_address0;
    sc_out< sc_logic > count_ce0;
    sc_out< sc_logic > count_we0;
    sc_out< sc_lv<32> > count_d0;
    sc_in< sc_lv<32> > count_q0;


    // Module declarations
    sort_occ_v2(sc_module_name name);
    SC_HAS_PROCESS(sort_occ_v2);

    ~sort_occ_v2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > shift_cast_fu_80_p1;
    sc_signal< sc_lv<32> > shift_cast_reg_129;
    sc_signal< sc_lv<17> > i_fu_84_p2;
    sc_signal< sc_lv<17> > i_reg_134;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_94_p2;
    sc_signal< sc_lv<32> > array_src_load_reg_147;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > tmp_3_fu_110_p1;
    sc_signal< sc_lv<8> > tmp_3_reg_152;
    sc_signal< sc_lv<8> > count_addr_reg_157;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > count_load_reg_162;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<17> > i_0_in_reg_69;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > tmp_1_fu_100_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_114_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_124_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_118_p2;
    sc_signal< sc_lv<32> > i_cast_fu_90_p1;
    sc_signal< sc_lv<32> > tmp_2_fu_105_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<17> ap_const_lv17_10000;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<17> ap_const_lv17_1FFFF;
    static const sc_lv<17> ap_const_lv17_0;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_array_dst_address0();
    void thread_array_dst_ce0();
    void thread_array_dst_d0();
    void thread_array_dst_we0();
    void thread_array_src_address0();
    void thread_array_src_ce0();
    void thread_count_address0();
    void thread_count_ce0();
    void thread_count_d0();
    void thread_count_we0();
    void thread_i_cast_fu_90_p1();
    void thread_i_fu_84_p2();
    void thread_shift_cast_fu_80_p1();
    void thread_tmp_1_fu_100_p1();
    void thread_tmp_2_fu_105_p2();
    void thread_tmp_3_fu_110_p1();
    void thread_tmp_4_fu_114_p1();
    void thread_tmp_5_fu_118_p2();
    void thread_tmp_6_fu_124_p1();
    void thread_tmp_fu_94_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
