// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sort_occ_v2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sort_occ_v2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sort_occ_v2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> sort_occ_v2::ap_ST_fsm_state1 = "1";
const sc_lv<6> sort_occ_v2::ap_ST_fsm_state2 = "10";
const sc_lv<6> sort_occ_v2::ap_ST_fsm_state3 = "100";
const sc_lv<6> sort_occ_v2::ap_ST_fsm_state4 = "1000";
const sc_lv<6> sort_occ_v2::ap_ST_fsm_state5 = "10000";
const sc_lv<6> sort_occ_v2::ap_ST_fsm_state6 = "100000";
const sc_lv<32> sort_occ_v2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sort_occ_v2::ap_const_lv32_1 = "1";
const sc_lv<32> sort_occ_v2::ap_const_lv32_2 = "10";
const sc_lv<32> sort_occ_v2::ap_const_lv32_3 = "11";
const sc_lv<32> sort_occ_v2::ap_const_lv32_4 = "100";
const sc_lv<17> sort_occ_v2::ap_const_lv17_10000 = "10000000000000000";
const sc_lv<32> sort_occ_v2::ap_const_lv32_5 = "101";
const sc_lv<17> sort_occ_v2::ap_const_lv17_1FFFF = "11111111111111111";
const sc_lv<17> sort_occ_v2::ap_const_lv17_0 = "00000000000000000";
const sc_lv<32> sort_occ_v2::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<1> sort_occ_v2::ap_const_lv1_1 = "1";
const bool sort_occ_v2::ap_const_boolean_1 = true;

sort_occ_v2::sort_occ_v2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_94_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_94_p2 );

    SC_METHOD(thread_array_dst_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_6_fu_124_p1 );

    SC_METHOD(thread_array_dst_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_array_dst_d0);
    sensitive << ( array_src_load_reg_147 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_array_dst_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_array_src_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_fu_100_p1 );

    SC_METHOD(thread_array_src_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_count_address0);
    sensitive << ( count_addr_reg_157 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_4_fu_114_p1 );

    SC_METHOD(thread_count_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_count_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_118_p2 );

    SC_METHOD(thread_count_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_cast_fu_90_p1);
    sensitive << ( i_fu_84_p2 );

    SC_METHOD(thread_i_fu_84_p2);
    sensitive << ( i_0_in_reg_69 );

    SC_METHOD(thread_shift_cast_fu_80_p1);
    sensitive << ( shift );

    SC_METHOD(thread_tmp_1_fu_100_p1);
    sensitive << ( i_cast_fu_90_p1 );

    SC_METHOD(thread_tmp_2_fu_105_p2);
    sensitive << ( array_src_q0 );
    sensitive << ( shift_cast_reg_129 );

    SC_METHOD(thread_tmp_3_fu_110_p1);
    sensitive << ( tmp_2_fu_105_p2 );

    SC_METHOD(thread_tmp_4_fu_114_p1);
    sensitive << ( tmp_3_reg_152 );

    SC_METHOD(thread_tmp_5_fu_118_p2);
    sensitive << ( count_load_reg_162 );

    SC_METHOD(thread_tmp_6_fu_124_p1);
    sensitive << ( tmp_5_fu_118_p2 );

    SC_METHOD(thread_tmp_fu_94_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_in_reg_69 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_94_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sort_occ_v2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, array_src_address0, "(port)array_src_address0");
    sc_trace(mVcdFile, array_src_ce0, "(port)array_src_ce0");
    sc_trace(mVcdFile, array_src_q0, "(port)array_src_q0");
    sc_trace(mVcdFile, array_dst_address0, "(port)array_dst_address0");
    sc_trace(mVcdFile, array_dst_ce0, "(port)array_dst_ce0");
    sc_trace(mVcdFile, array_dst_we0, "(port)array_dst_we0");
    sc_trace(mVcdFile, array_dst_d0, "(port)array_dst_d0");
    sc_trace(mVcdFile, shift, "(port)shift");
    sc_trace(mVcdFile, count_address0, "(port)count_address0");
    sc_trace(mVcdFile, count_ce0, "(port)count_ce0");
    sc_trace(mVcdFile, count_we0, "(port)count_we0");
    sc_trace(mVcdFile, count_d0, "(port)count_d0");
    sc_trace(mVcdFile, count_q0, "(port)count_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, shift_cast_fu_80_p1, "shift_cast_fu_80_p1");
    sc_trace(mVcdFile, shift_cast_reg_129, "shift_cast_reg_129");
    sc_trace(mVcdFile, i_fu_84_p2, "i_fu_84_p2");
    sc_trace(mVcdFile, i_reg_134, "i_reg_134");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_94_p2, "tmp_fu_94_p2");
    sc_trace(mVcdFile, array_src_load_reg_147, "array_src_load_reg_147");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_fu_110_p1, "tmp_3_fu_110_p1");
    sc_trace(mVcdFile, tmp_3_reg_152, "tmp_3_reg_152");
    sc_trace(mVcdFile, count_addr_reg_157, "count_addr_reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, count_load_reg_162, "count_load_reg_162");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_0_in_reg_69, "i_0_in_reg_69");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_1_fu_100_p1, "tmp_1_fu_100_p1");
    sc_trace(mVcdFile, tmp_4_fu_114_p1, "tmp_4_fu_114_p1");
    sc_trace(mVcdFile, tmp_6_fu_124_p1, "tmp_6_fu_124_p1");
    sc_trace(mVcdFile, tmp_5_fu_118_p2, "tmp_5_fu_118_p2");
    sc_trace(mVcdFile, i_cast_fu_90_p1, "i_cast_fu_90_p1");
    sc_trace(mVcdFile, tmp_2_fu_105_p2, "tmp_2_fu_105_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sort_occ_v2::~sort_occ_v2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void sort_occ_v2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_0_in_reg_69 = i_reg_134.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_in_reg_69 = ap_const_lv17_10000;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        array_src_load_reg_147 = array_src_q0.read();
        tmp_3_reg_152 = tmp_3_fu_110_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        count_addr_reg_157 =  (sc_lv<8>) (tmp_4_fu_114_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        count_load_reg_162 = count_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_134 = i_fu_84_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        shift_cast_reg_129 = shift_cast_fu_80_p1.read();
    }
}

void sort_occ_v2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sort_occ_v2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sort_occ_v2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sort_occ_v2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sort_occ_v2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sort_occ_v2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sort_occ_v2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(tmp_fu_94_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_fu_94_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_array_dst_address0() {
    array_dst_address0 =  (sc_lv<16>) (tmp_6_fu_124_p1.read());
}

void sort_occ_v2::thread_array_dst_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        array_dst_ce0 = ap_const_logic_1;
    } else {
        array_dst_ce0 = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_array_dst_d0() {
    array_dst_d0 = array_src_load_reg_147.read();
}

void sort_occ_v2::thread_array_dst_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        array_dst_we0 = ap_const_logic_1;
    } else {
        array_dst_we0 = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_array_src_address0() {
    array_src_address0 =  (sc_lv<16>) (tmp_1_fu_100_p1.read());
}

void sort_occ_v2::thread_array_src_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        array_src_ce0 = ap_const_logic_1;
    } else {
        array_src_ce0 = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_count_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        count_address0 = count_addr_reg_157.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        count_address0 =  (sc_lv<8>) (tmp_4_fu_114_p1.read());
    } else {
        count_address0 = "XXXXXXXX";
    }
}

void sort_occ_v2::thread_count_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        count_ce0 = ap_const_logic_1;
    } else {
        count_ce0 = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_count_d0() {
    count_d0 = tmp_5_fu_118_p2.read();
}

void sort_occ_v2::thread_count_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        count_we0 = ap_const_logic_1;
    } else {
        count_we0 = ap_const_logic_0;
    }
}

void sort_occ_v2::thread_i_cast_fu_90_p1() {
    i_cast_fu_90_p1 = esl_sext<32,17>(i_fu_84_p2.read());
}

void sort_occ_v2::thread_i_fu_84_p2() {
    i_fu_84_p2 = (!i_0_in_reg_69.read().is_01() || !ap_const_lv17_1FFFF.is_01())? sc_lv<17>(): (sc_biguint<17>(i_0_in_reg_69.read()) + sc_bigint<17>(ap_const_lv17_1FFFF));
}

void sort_occ_v2::thread_shift_cast_fu_80_p1() {
    shift_cast_fu_80_p1 = esl_zext<32,6>(shift.read());
}

void sort_occ_v2::thread_tmp_1_fu_100_p1() {
    tmp_1_fu_100_p1 = esl_zext<64,32>(i_cast_fu_90_p1.read());
}

void sort_occ_v2::thread_tmp_2_fu_105_p2() {
    tmp_2_fu_105_p2 = (!shift_cast_reg_129.read().is_01())? sc_lv<32>(): array_src_q0.read() >> (unsigned short)shift_cast_reg_129.read().to_uint();
}

void sort_occ_v2::thread_tmp_3_fu_110_p1() {
    tmp_3_fu_110_p1 = tmp_2_fu_105_p2.read().range(8-1, 0);
}

void sort_occ_v2::thread_tmp_4_fu_114_p1() {
    tmp_4_fu_114_p1 = esl_zext<64,8>(tmp_3_reg_152.read());
}

void sort_occ_v2::thread_tmp_5_fu_118_p2() {
    tmp_5_fu_118_p2 = (!ap_const_lv32_FFFFFFFF.is_01() || !count_load_reg_162.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFFF) + sc_biguint<32>(count_load_reg_162.read()));
}

void sort_occ_v2::thread_tmp_6_fu_124_p1() {
    tmp_6_fu_124_p1 = esl_sext<64,32>(tmp_5_fu_118_p2.read());
}

void sort_occ_v2::thread_tmp_fu_94_p2() {
    tmp_fu_94_p2 = (!i_0_in_reg_69.read().is_01() || !ap_const_lv17_0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_in_reg_69.read() == ap_const_lv17_0);
}

void sort_occ_v2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_fu_94_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

