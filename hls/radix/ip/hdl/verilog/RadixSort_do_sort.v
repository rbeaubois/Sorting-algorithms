// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module RadixSort_do_sort (
        ap_clk,
        ap_rst,
        RadixSort_array1_V_address0,
        RadixSort_array1_V_ce0,
        RadixSort_array1_V_we0,
        RadixSort_array1_V_d0,
        RadixSort_array1_V_q0,
        RadixSort_array2_V_address0,
        RadixSort_array2_V_ce0,
        RadixSort_array2_V_we0,
        RadixSort_array2_V_d0,
        RadixSort_array2_V_q0,
        e_dout,
        e_empty_n,
        e_read,
        s_din,
        s_full_n,
        s_write
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_state11 = 38'd1024;
parameter    ap_ST_fsm_state12 = 38'd2048;
parameter    ap_ST_fsm_state13 = 38'd4096;
parameter    ap_ST_fsm_state14 = 38'd8192;
parameter    ap_ST_fsm_state15 = 38'd16384;
parameter    ap_ST_fsm_state16 = 38'd32768;
parameter    ap_ST_fsm_state17 = 38'd65536;
parameter    ap_ST_fsm_state18 = 38'd131072;
parameter    ap_ST_fsm_state19 = 38'd262144;
parameter    ap_ST_fsm_state20 = 38'd524288;
parameter    ap_ST_fsm_state21 = 38'd1048576;
parameter    ap_ST_fsm_state22 = 38'd2097152;
parameter    ap_ST_fsm_state23 = 38'd4194304;
parameter    ap_ST_fsm_state24 = 38'd8388608;
parameter    ap_ST_fsm_state25 = 38'd16777216;
parameter    ap_ST_fsm_state26 = 38'd33554432;
parameter    ap_ST_fsm_state27 = 38'd67108864;
parameter    ap_ST_fsm_state28 = 38'd134217728;
parameter    ap_ST_fsm_state29 = 38'd268435456;
parameter    ap_ST_fsm_state30 = 38'd536870912;
parameter    ap_ST_fsm_state31 = 38'd1073741824;
parameter    ap_ST_fsm_state32 = 38'd2147483648;
parameter    ap_ST_fsm_state33 = 38'd4294967296;
parameter    ap_ST_fsm_state34 = 38'd8589934592;
parameter    ap_ST_fsm_state35 = 38'd17179869184;
parameter    ap_ST_fsm_state36 = 38'd34359738368;
parameter    ap_ST_fsm_state37 = 38'd68719476736;
parameter    ap_ST_fsm_state38 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
output  [15:0] RadixSort_array1_V_address0;
output   RadixSort_array1_V_ce0;
output   RadixSort_array1_V_we0;
output  [31:0] RadixSort_array1_V_d0;
input  [31:0] RadixSort_array1_V_q0;
output  [15:0] RadixSort_array2_V_address0;
output   RadixSort_array2_V_ce0;
output   RadixSort_array2_V_we0;
output  [31:0] RadixSort_array2_V_d0;
input  [31:0] RadixSort_array2_V_q0;
input  [31:0] e_dout;
input   e_empty_n;
output   e_read;
output  [31:0] s_din;
input   s_full_n;
output   s_write;

reg[15:0] RadixSort_array1_V_address0;
reg RadixSort_array1_V_ce0;
reg RadixSort_array1_V_we0;
reg[31:0] RadixSort_array1_V_d0;
reg[15:0] RadixSort_array2_V_address0;
reg RadixSort_array2_V_ce0;
reg RadixSort_array2_V_we0;
reg e_read;
reg s_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln887_fu_625_p2;
reg    s_blk_n;
wire    ap_CS_fsm_state38;
reg   [31:0] reg_615;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state27;
reg   [31:0] reg_620;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state35;
wire   [15:0] i_V_fu_631_p2;
reg    ap_block_state4;
wire   [15:0] i_V_1_fu_648_p2;
reg   [15:0] i_V_1_reg_1114;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln8_fu_642_p2;
reg   [7:0] count_V_addr_1_reg_1124;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln14_fu_675_p2;
reg   [7:0] count_V_addr_3_reg_1137;
wire   [8:0] i_V_2_fu_701_p2;
reg   [8:0] i_V_2_reg_1142;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_1_fu_714_p3;
wire   [16:0] add_ln18_fu_727_p2;
reg   [16:0] add_ln18_reg_1155;
reg   [7:0] count_V_addr_4_reg_1160;
wire   [15:0] i_V_3_fu_760_p2;
reg   [15:0] i_V_3_reg_1168;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln8_1_fu_754_p2;
reg   [7:0] count_V_1_addr_1_reg_1178;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln14_1_fu_783_p2;
reg   [7:0] count_V_1_addr_3_reg_1191;
wire   [8:0] i_V_4_fu_809_p2;
reg   [8:0] i_V_4_reg_1196;
wire    ap_CS_fsm_state18;
wire   [0:0] tmp_2_fu_822_p3;
wire   [16:0] add_ln18_1_fu_835_p2;
reg   [16:0] add_ln18_1_reg_1209;
reg   [7:0] count_V_1_addr_4_reg_1214;
wire   [15:0] i_V_5_fu_864_p2;
reg   [15:0] i_V_5_reg_1222;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln8_2_fu_858_p2;
reg   [7:0] count_V_2_addr_1_reg_1232;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln14_2_fu_887_p2;
reg   [7:0] count_V_2_addr_3_reg_1245;
wire   [8:0] i_V_6_fu_913_p2;
reg   [8:0] i_V_6_reg_1250;
wire    ap_CS_fsm_state26;
wire   [0:0] tmp_3_fu_926_p3;
wire   [16:0] add_ln18_2_fu_939_p2;
reg   [16:0] add_ln18_2_reg_1263;
reg   [7:0] count_V_2_addr_4_reg_1268;
wire   [15:0] i_V_7_fu_968_p2;
reg   [15:0] i_V_7_reg_1276;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln8_3_fu_962_p2;
reg   [7:0] count_V_3_addr_1_reg_1286;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
wire   [0:0] icmp_ln14_3_fu_991_p2;
reg   [7:0] count_V_3_addr_3_reg_1299;
wire   [8:0] i_V_8_fu_1017_p2;
reg   [8:0] i_V_8_reg_1304;
wire    ap_CS_fsm_state34;
wire   [0:0] tmp_4_fu_1030_p3;
wire   [16:0] add_ln18_3_fu_1043_p2;
reg   [16:0] add_ln18_3_reg_1317;
reg   [7:0] count_V_3_addr_4_reg_1322;
wire   [15:0] i_V_9_fu_1072_p2;
reg   [15:0] i_V_9_reg_1330;
wire    ap_CS_fsm_state37;
wire   [0:0] icmp_ln887_1_fu_1066_p2;
reg   [7:0] count_V_3_address0;
reg    count_V_3_ce0;
reg    count_V_3_we0;
reg   [15:0] count_V_3_d0;
wire   [15:0] count_V_3_q0;
reg   [7:0] count_V_3_address1;
reg    count_V_3_ce1;
reg    count_V_3_we1;
reg   [15:0] count_V_3_d1;
wire   [15:0] count_V_3_q1;
reg   [7:0] count_V_2_address0;
reg    count_V_2_ce0;
reg    count_V_2_we0;
reg   [15:0] count_V_2_d0;
wire   [15:0] count_V_2_q0;
reg   [7:0] count_V_2_address1;
reg    count_V_2_ce1;
reg    count_V_2_we1;
reg   [15:0] count_V_2_d1;
wire   [15:0] count_V_2_q1;
reg   [7:0] count_V_1_address0;
reg    count_V_1_ce0;
reg    count_V_1_we0;
reg   [15:0] count_V_1_d0;
wire   [15:0] count_V_1_q0;
reg   [7:0] count_V_1_address1;
reg    count_V_1_ce1;
reg    count_V_1_we1;
reg   [15:0] count_V_1_d1;
wire   [15:0] count_V_1_q1;
reg   [7:0] count_V_address0;
reg    count_V_ce0;
reg    count_V_we0;
reg   [15:0] count_V_d0;
wire   [15:0] count_V_q0;
reg   [7:0] count_V_address1;
reg    count_V_ce1;
reg    count_V_we1;
reg   [15:0] count_V_d1;
wire   [15:0] count_V_q1;
reg   [15:0] t_V_reg_431;
wire    ap_CS_fsm_state3;
reg   [15:0] t_V_2_reg_442;
wire    ap_CS_fsm_state7;
reg   [8:0] t_V_3_reg_453;
wire    ap_CS_fsm_state9;
reg   [16:0] j_V_reg_464;
wire    ap_CS_fsm_state12;
reg   [15:0] t_V_7_reg_475;
wire    ap_CS_fsm_state15;
reg   [8:0] t_V_8_reg_486;
wire    ap_CS_fsm_state17;
reg   [16:0] j_V_1_reg_497;
wire    ap_CS_fsm_state20;
reg   [15:0] t_V_12_reg_508;
wire    ap_CS_fsm_state23;
reg   [8:0] t_V_13_reg_519;
wire    ap_CS_fsm_state25;
reg   [16:0] j_V_2_reg_530;
wire    ap_CS_fsm_state28;
reg   [15:0] t_V_17_reg_541;
wire    ap_CS_fsm_state31;
reg   [8:0] t_V_18_reg_552;
wire    ap_CS_fsm_state33;
reg   [16:0] j_V_3_reg_563;
wire    ap_CS_fsm_state36;
reg   [15:0] t_V_21_reg_574;
wire   [63:0] zext_ln544_fu_637_p1;
wire   [63:0] zext_ln544_1_fu_654_p1;
wire   [63:0] zext_ln681_fu_663_p1;
wire   [63:0] zext_ln544_14_fu_696_p1;
wire   [63:0] zext_ln544_2_fu_681_p1;
wire   [63:0] zext_ln544_15_fu_722_p1;
wire   [63:0] zext_ln681_1_fu_737_p1;
wire   [63:0] zext_ln544_3_fu_749_p1;
wire   [63:0] zext_ln544_4_fu_766_p1;
wire   [63:0] zext_ln681_2_fu_771_p1;
wire   [63:0] zext_ln544_16_fu_804_p1;
wire   [63:0] zext_ln544_5_fu_789_p1;
wire   [63:0] zext_ln544_17_fu_830_p1;
wire   [63:0] zext_ln681_3_fu_841_p1;
wire   [63:0] zext_ln544_6_fu_853_p1;
wire   [63:0] zext_ln544_7_fu_870_p1;
wire   [63:0] zext_ln681_4_fu_875_p1;
wire   [63:0] zext_ln544_18_fu_908_p1;
wire   [63:0] zext_ln544_8_fu_893_p1;
wire   [63:0] zext_ln544_19_fu_934_p1;
wire   [63:0] zext_ln681_5_fu_945_p1;
wire   [63:0] zext_ln544_9_fu_957_p1;
wire   [63:0] zext_ln544_10_fu_974_p1;
wire   [63:0] zext_ln681_6_fu_979_p1;
wire   [63:0] zext_ln544_20_fu_1012_p1;
wire   [63:0] zext_ln544_11_fu_997_p1;
wire   [63:0] zext_ln544_21_fu_1038_p1;
wire   [63:0] zext_ln681_7_fu_1049_p1;
wire   [63:0] zext_ln544_12_fu_1061_p1;
wire   [63:0] zext_ln544_13_fu_1078_p1;
wire   [15:0] add_ln700_fu_668_p2;
wire   [15:0] add_ln700_2_fu_707_p2;
wire   [15:0] add_ln701_fu_742_p2;
wire   [15:0] add_ln700_4_fu_776_p2;
wire   [15:0] add_ln700_6_fu_815_p2;
wire   [15:0] add_ln701_1_fu_846_p2;
wire   [15:0] add_ln700_8_fu_880_p2;
wire   [15:0] add_ln700_10_fu_919_p2;
wire   [15:0] add_ln701_2_fu_950_p2;
wire   [15:0] add_ln700_12_fu_984_p2;
wire   [15:0] add_ln700_14_fu_1023_p2;
wire   [15:0] add_ln701_3_fu_1054_p2;
wire   [7:0] trunc_ln681_fu_659_p1;
wire   [7:0] trunc_ln215_fu_686_p1;
wire   [7:0] ret_V_fu_690_p2;
wire   [7:0] trunc_ln681_1_fu_733_p1;
wire   [7:0] grp_fu_585_p4;
wire   [7:0] trunc_ln215_1_fu_794_p1;
wire   [7:0] ret_V_1_fu_798_p2;
wire   [7:0] grp_fu_595_p4;
wire   [7:0] trunc_ln215_2_fu_898_p1;
wire   [7:0] ret_V_2_fu_902_p2;
wire   [7:0] grp_fu_605_p4;
wire   [7:0] trunc_ln215_3_fu_1002_p1;
wire   [7:0] ret_V_3_fu_1006_p2;
reg   [37:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
end

RadixSort_do_sortbkb #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(count_V_3_address0),
    .ce0(count_V_3_ce0),
    .we0(count_V_3_we0),
    .d0(count_V_3_d0),
    .q0(count_V_3_q0),
    .address1(count_V_3_address1),
    .ce1(count_V_3_ce1),
    .we1(count_V_3_we1),
    .d1(count_V_3_d1),
    .q1(count_V_3_q1)
);

RadixSort_do_sortbkb #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(count_V_2_address0),
    .ce0(count_V_2_ce0),
    .we0(count_V_2_we0),
    .d0(count_V_2_d0),
    .q0(count_V_2_q0),
    .address1(count_V_2_address1),
    .ce1(count_V_2_ce1),
    .we1(count_V_2_we1),
    .d1(count_V_2_d1),
    .q1(count_V_2_q1)
);

RadixSort_do_sortbkb #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(count_V_1_address0),
    .ce0(count_V_1_ce0),
    .we0(count_V_1_we0),
    .d0(count_V_1_d0),
    .q0(count_V_1_q0),
    .address1(count_V_1_address1),
    .ce1(count_V_1_ce1),
    .we1(count_V_1_we1),
    .d1(count_V_1_d1),
    .q1(count_V_1_q1)
);

RadixSort_do_sortbkb #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(count_V_address0),
    .ce0(count_V_ce0),
    .we0(count_V_we0),
    .d0(count_V_d0),
    .q0(count_V_q0),
    .address1(count_V_address1),
    .ce1(count_V_ce1),
    .we1(count_V_we1),
    .d1(count_V_d1),
    .q1(count_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_1_fu_783_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        j_V_1_reg_497 <= 17'd63999;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        j_V_1_reg_497 <= add_ln18_1_reg_1209;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_2_fu_887_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        j_V_2_reg_530 <= 17'd63999;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        j_V_2_reg_530 <= add_ln18_2_reg_1263;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_3_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        j_V_3_reg_563 <= 17'd63999;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        j_V_3_reg_563 <= add_ln18_3_reg_1317;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln14_fu_675_p2 == 1'd1))) begin
        j_V_reg_464 <= 17'd63999;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_V_reg_464 <= add_ln18_reg_1155;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_822_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        t_V_12_reg_508 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        t_V_12_reg_508 <= i_V_5_reg_1222;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_2_fu_858_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        t_V_13_reg_519 <= 9'd1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        t_V_13_reg_519 <= i_V_6_reg_1250;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_926_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        t_V_17_reg_541 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        t_V_17_reg_541 <= i_V_7_reg_1276;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_3_fu_962_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        t_V_18_reg_552 <= 9'd1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        t_V_18_reg_552 <= i_V_8_reg_1304;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_1030_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        t_V_21_reg_574 <= 16'd0;
    end else if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        t_V_21_reg_574 <= i_V_9_reg_1330;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (icmp_ln887_fu_625_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_2_reg_442 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_2_reg_442 <= i_V_1_reg_1114;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln8_fu_642_p2 == 1'd1))) begin
        t_V_3_reg_453 <= 9'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_3_reg_453 <= i_V_2_reg_1142;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_714_p3 == 1'd1))) begin
        t_V_7_reg_475 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        t_V_7_reg_475 <= i_V_3_reg_1168;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln8_1_fu_754_p2 == 1'd1))) begin
        t_V_8_reg_486 <= 9'd1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        t_V_8_reg_486 <= i_V_4_reg_1196;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (icmp_ln887_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_reg_431 <= i_V_fu_631_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_reg_431 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_822_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        add_ln18_1_reg_1209 <= add_ln18_1_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_926_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        add_ln18_2_reg_1263 <= add_ln18_2_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_1030_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        add_ln18_3_reg_1317 <= add_ln18_3_fu_1043_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_714_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln18_reg_1155 <= add_ln18_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        count_V_1_addr_1_reg_1178 <= zext_ln681_2_fu_771_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_1_fu_783_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        count_V_1_addr_3_reg_1191 <= zext_ln544_5_fu_789_p1;
        i_V_4_reg_1196 <= i_V_4_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        count_V_1_addr_4_reg_1214 <= zext_ln681_3_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        count_V_2_addr_1_reg_1232 <= zext_ln681_4_fu_875_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_2_fu_887_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        count_V_2_addr_3_reg_1245 <= zext_ln544_8_fu_893_p1;
        i_V_6_reg_1250 <= i_V_6_fu_913_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        count_V_2_addr_4_reg_1268 <= zext_ln681_5_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        count_V_3_addr_1_reg_1286 <= zext_ln681_6_fu_979_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_3_fu_991_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        count_V_3_addr_3_reg_1299 <= zext_ln544_11_fu_997_p1;
        i_V_8_reg_1304 <= i_V_8_fu_1017_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        count_V_3_addr_4_reg_1322 <= zext_ln681_7_fu_1049_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_V_addr_1_reg_1124 <= zext_ln681_fu_663_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        count_V_addr_3_reg_1137 <= zext_ln544_2_fu_681_p1;
        i_V_2_reg_1142 <= i_V_2_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        count_V_addr_4_reg_1160 <= zext_ln681_1_fu_737_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_V_1_reg_1114 <= i_V_1_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_V_3_reg_1168 <= i_V_3_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_V_5_reg_1222 <= i_V_5_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_V_7_reg_1276 <= i_V_7_fu_968_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_V_9_reg_1330 <= i_V_9_fu_1072_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_615 <= RadixSort_array1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_620 <= RadixSort_array2_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        RadixSort_array1_V_address0 = zext_ln544_13_fu_1078_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        RadixSort_array1_V_address0 = zext_ln544_12_fu_1061_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        RadixSort_array1_V_address0 = zext_ln544_19_fu_934_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        RadixSort_array1_V_address0 = zext_ln544_7_fu_870_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        RadixSort_array1_V_address0 = zext_ln544_6_fu_853_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        RadixSort_array1_V_address0 = zext_ln544_15_fu_722_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        RadixSort_array1_V_address0 = zext_ln544_1_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RadixSort_array1_V_address0 = zext_ln544_fu_637_p1;
    end else begin
        RadixSort_array1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5) | (~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        RadixSort_array1_V_ce0 = 1'b1;
    end else begin
        RadixSort_array1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state20))) begin
        RadixSort_array1_V_d0 = reg_620;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RadixSort_array1_V_d0 = e_dout;
    end else begin
        RadixSort_array1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state20) | (~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (icmp_ln887_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        RadixSort_array1_V_we0 = 1'b1;
    end else begin
        RadixSort_array1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        RadixSort_array2_V_address0 = zext_ln544_21_fu_1038_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        RadixSort_array2_V_address0 = zext_ln544_10_fu_974_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        RadixSort_array2_V_address0 = zext_ln544_9_fu_957_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        RadixSort_array2_V_address0 = zext_ln544_17_fu_830_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        RadixSort_array2_V_address0 = zext_ln544_4_fu_766_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        RadixSort_array2_V_address0 = zext_ln544_3_fu_749_p1;
    end else begin
        RadixSort_array2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13))) begin
        RadixSort_array2_V_ce0 = 1'b1;
    end else begin
        RadixSort_array2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state12))) begin
        RadixSort_array2_V_we0 = 1'b1;
    end else begin
        RadixSort_array2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        count_V_1_address0 = zext_ln544_16_fu_804_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        count_V_1_address0 = count_V_1_addr_1_reg_1178;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        count_V_1_address0 = zext_ln681_2_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_V_1_address0 = 64'd0;
    end else begin
        count_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        count_V_1_address1 = count_V_1_addr_4_reg_1214;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        count_V_1_address1 = zext_ln681_3_fu_841_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        count_V_1_address1 = count_V_1_addr_3_reg_1191;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        count_V_1_address1 = zext_ln544_5_fu_789_p1;
    end else begin
        count_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        count_V_1_ce0 = 1'b1;
    end else begin
        count_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19))) begin
        count_V_1_ce1 = 1'b1;
    end else begin
        count_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        count_V_1_d0 = add_ln700_4_fu_776_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_V_1_d0 = 16'd0;
    end else begin
        count_V_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        count_V_1_d1 = add_ln701_1_fu_846_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        count_V_1_d1 = add_ln700_6_fu_815_p2;
    end else begin
        count_V_1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_714_p3 == 1'd1)))) begin
        count_V_1_we0 = 1'b1;
    end else begin
        count_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17))) begin
        count_V_1_we1 = 1'b1;
    end else begin
        count_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        count_V_2_address0 = zext_ln544_18_fu_908_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        count_V_2_address0 = count_V_2_addr_1_reg_1232;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        count_V_2_address0 = zext_ln681_4_fu_875_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        count_V_2_address0 = 64'd0;
    end else begin
        count_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        count_V_2_address1 = count_V_2_addr_4_reg_1268;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        count_V_2_address1 = zext_ln681_5_fu_945_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        count_V_2_address1 = count_V_2_addr_3_reg_1245;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        count_V_2_address1 = zext_ln544_8_fu_893_p1;
    end else begin
        count_V_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        count_V_2_ce0 = 1'b1;
    end else begin
        count_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        count_V_2_ce1 = 1'b1;
    end else begin
        count_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        count_V_2_d0 = add_ln700_8_fu_880_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        count_V_2_d0 = 16'd0;
    end else begin
        count_V_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        count_V_2_d1 = add_ln701_2_fu_950_p2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        count_V_2_d1 = add_ln700_10_fu_919_p2;
    end else begin
        count_V_2_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((tmp_2_fu_822_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state18)))) begin
        count_V_2_we0 = 1'b1;
    end else begin
        count_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state25))) begin
        count_V_2_we1 = 1'b1;
    end else begin
        count_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        count_V_3_address0 = zext_ln544_20_fu_1012_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        count_V_3_address0 = count_V_3_addr_1_reg_1286;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        count_V_3_address0 = zext_ln681_6_fu_979_p1;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        count_V_3_address0 = 64'd0;
    end else begin
        count_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        count_V_3_address1 = count_V_3_addr_4_reg_1322;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        count_V_3_address1 = zext_ln681_7_fu_1049_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        count_V_3_address1 = count_V_3_addr_3_reg_1299;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        count_V_3_address1 = zext_ln544_11_fu_997_p1;
    end else begin
        count_V_3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26))) begin
        count_V_3_ce0 = 1'b1;
    end else begin
        count_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state35))) begin
        count_V_3_ce1 = 1'b1;
    end else begin
        count_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        count_V_3_d0 = add_ln700_12_fu_984_p2;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        count_V_3_d0 = 16'd0;
    end else begin
        count_V_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        count_V_3_d1 = add_ln701_3_fu_1054_p2;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        count_V_3_d1 = add_ln700_14_fu_1023_p2;
    end else begin
        count_V_3_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((tmp_3_fu_926_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state26)))) begin
        count_V_3_we0 = 1'b1;
    end else begin
        count_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state33))) begin
        count_V_3_we1 = 1'b1;
    end else begin
        count_V_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count_V_address0 = zext_ln544_14_fu_696_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        count_V_address0 = count_V_addr_1_reg_1124;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        count_V_address0 = zext_ln681_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        count_V_address0 = 64'd0;
    end else begin
        count_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        count_V_address1 = count_V_addr_4_reg_1160;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        count_V_address1 = zext_ln681_1_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        count_V_address1 = count_V_addr_3_reg_1137;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        count_V_address1 = zext_ln544_2_fu_681_p1;
    end else begin
        count_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        count_V_ce0 = 1'b1;
    end else begin
        count_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        count_V_ce1 = 1'b1;
    end else begin
        count_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        count_V_d0 = add_ln700_fu_668_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        count_V_d0 = 16'd0;
    end else begin
        count_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        count_V_d1 = add_ln701_fu_742_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        count_V_d1 = add_ln700_2_fu_707_p2;
    end else begin
        count_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (icmp_ln887_fu_625_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        count_V_we0 = 1'b1;
    end else begin
        count_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        count_V_we1 = 1'b1;
    end else begin
        count_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (icmp_ln887_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (icmp_ln887_fu_625_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0)) & (icmp_ln887_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln8_fu_642_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln14_fu_675_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_714_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln8_1_fu_754_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln14_1_fu_783_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            if (((tmp_2_fu_822_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln8_2_fu_858_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state24 : begin
            if (((icmp_ln14_2_fu_887_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state26 : begin
            if (((tmp_3_fu_926_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln8_3_fu_962_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln14_3_fu_991_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state34 : begin
            if (((tmp_4_fu_1030_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln887_1_fu_1066_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((s_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RadixSort_array2_V_d0 = reg_615;

assign add_ln18_1_fu_835_p2 = ($signed(j_V_1_reg_497) + $signed(17'd131071));

assign add_ln18_2_fu_939_p2 = ($signed(j_V_2_reg_530) + $signed(17'd131071));

assign add_ln18_3_fu_1043_p2 = ($signed(j_V_3_reg_563) + $signed(17'd131071));

assign add_ln18_fu_727_p2 = ($signed(17'd131071) + $signed(j_V_reg_464));

assign add_ln700_10_fu_919_p2 = (count_V_2_q0 + count_V_2_q1);

assign add_ln700_12_fu_984_p2 = (count_V_3_q0 + 16'd1);

assign add_ln700_14_fu_1023_p2 = (count_V_3_q0 + count_V_3_q1);

assign add_ln700_2_fu_707_p2 = (count_V_q0 + count_V_q1);

assign add_ln700_4_fu_776_p2 = (count_V_1_q0 + 16'd1);

assign add_ln700_6_fu_815_p2 = (count_V_1_q0 + count_V_1_q1);

assign add_ln700_8_fu_880_p2 = (count_V_2_q0 + 16'd1);

assign add_ln700_fu_668_p2 = (16'd1 + count_V_q0);

assign add_ln701_1_fu_846_p2 = ($signed(count_V_1_q1) + $signed(16'd65535));

assign add_ln701_2_fu_950_p2 = ($signed(count_V_2_q1) + $signed(16'd65535));

assign add_ln701_3_fu_1054_p2 = ($signed(count_V_3_q1) + $signed(16'd65535));

assign add_ln701_fu_742_p2 = ($signed(16'd65535) + $signed(count_V_q1));

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state4 = ((icmp_ln887_fu_625_p2 == 1'd0) & (e_empty_n == 1'b0));
end

assign grp_fu_585_p4 = {{RadixSort_array2_V_q0[15:8]}};

assign grp_fu_595_p4 = {{RadixSort_array1_V_q0[23:16]}};

assign grp_fu_605_p4 = {{RadixSort_array2_V_q0[31:24]}};

assign i_V_1_fu_648_p2 = (t_V_2_reg_442 + 16'd1);

assign i_V_2_fu_701_p2 = (9'd1 + t_V_3_reg_453);

assign i_V_3_fu_760_p2 = (t_V_7_reg_475 + 16'd1);

assign i_V_4_fu_809_p2 = (9'd1 + t_V_8_reg_486);

assign i_V_5_fu_864_p2 = (t_V_12_reg_508 + 16'd1);

assign i_V_6_fu_913_p2 = (9'd1 + t_V_13_reg_519);

assign i_V_7_fu_968_p2 = (t_V_17_reg_541 + 16'd1);

assign i_V_8_fu_1017_p2 = (9'd1 + t_V_18_reg_552);

assign i_V_9_fu_1072_p2 = (t_V_21_reg_574 + 16'd1);

assign i_V_fu_631_p2 = (t_V_reg_431 + 16'd1);

assign icmp_ln14_1_fu_783_p2 = ((t_V_8_reg_486 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln14_2_fu_887_p2 = ((t_V_13_reg_519 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln14_3_fu_991_p2 = ((t_V_18_reg_552 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_675_p2 = ((t_V_3_reg_453 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_1066_p2 = ((t_V_21_reg_574 == 16'd64000) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_625_p2 = ((t_V_reg_431 == 16'd64000) ? 1'b1 : 1'b0);

assign icmp_ln8_1_fu_754_p2 = ((t_V_7_reg_475 == 16'd64000) ? 1'b1 : 1'b0);

assign icmp_ln8_2_fu_858_p2 = ((t_V_12_reg_508 == 16'd64000) ? 1'b1 : 1'b0);

assign icmp_ln8_3_fu_962_p2 = ((t_V_17_reg_541 == 16'd64000) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_642_p2 = ((t_V_2_reg_442 == 16'd64000) ? 1'b1 : 1'b0);

assign ret_V_1_fu_798_p2 = ($signed(8'd255) + $signed(trunc_ln215_1_fu_794_p1));

assign ret_V_2_fu_902_p2 = ($signed(8'd255) + $signed(trunc_ln215_2_fu_898_p1));

assign ret_V_3_fu_1006_p2 = ($signed(8'd255) + $signed(trunc_ln215_3_fu_1002_p1));

assign ret_V_fu_690_p2 = ($signed(8'd255) + $signed(trunc_ln215_fu_686_p1));

assign s_din = RadixSort_array1_V_q0;

assign tmp_1_fu_714_p3 = j_V_reg_464[32'd16];

assign tmp_2_fu_822_p3 = j_V_1_reg_497[32'd16];

assign tmp_3_fu_926_p3 = j_V_2_reg_530[32'd16];

assign tmp_4_fu_1030_p3 = j_V_3_reg_563[32'd16];

assign trunc_ln215_1_fu_794_p1 = t_V_8_reg_486[7:0];

assign trunc_ln215_2_fu_898_p1 = t_V_13_reg_519[7:0];

assign trunc_ln215_3_fu_1002_p1 = t_V_18_reg_552[7:0];

assign trunc_ln215_fu_686_p1 = t_V_3_reg_453[7:0];

assign trunc_ln681_1_fu_733_p1 = RadixSort_array1_V_q0[7:0];

assign trunc_ln681_fu_659_p1 = RadixSort_array1_V_q0[7:0];

assign zext_ln544_10_fu_974_p1 = t_V_17_reg_541;

assign zext_ln544_11_fu_997_p1 = t_V_18_reg_552;

assign zext_ln544_12_fu_1061_p1 = add_ln701_3_fu_1054_p2;

assign zext_ln544_13_fu_1078_p1 = t_V_21_reg_574;

assign zext_ln544_14_fu_696_p1 = ret_V_fu_690_p2;

assign zext_ln544_15_fu_722_p1 = j_V_reg_464;

assign zext_ln544_16_fu_804_p1 = ret_V_1_fu_798_p2;

assign zext_ln544_17_fu_830_p1 = j_V_1_reg_497;

assign zext_ln544_18_fu_908_p1 = ret_V_2_fu_902_p2;

assign zext_ln544_19_fu_934_p1 = j_V_2_reg_530;

assign zext_ln544_1_fu_654_p1 = t_V_2_reg_442;

assign zext_ln544_20_fu_1012_p1 = ret_V_3_fu_1006_p2;

assign zext_ln544_21_fu_1038_p1 = j_V_3_reg_563;

assign zext_ln544_2_fu_681_p1 = t_V_3_reg_453;

assign zext_ln544_3_fu_749_p1 = add_ln701_fu_742_p2;

assign zext_ln544_4_fu_766_p1 = t_V_7_reg_475;

assign zext_ln544_5_fu_789_p1 = t_V_8_reg_486;

assign zext_ln544_6_fu_853_p1 = add_ln701_1_fu_846_p2;

assign zext_ln544_7_fu_870_p1 = t_V_12_reg_508;

assign zext_ln544_8_fu_893_p1 = t_V_13_reg_519;

assign zext_ln544_9_fu_957_p1 = add_ln701_2_fu_950_p2;

assign zext_ln544_fu_637_p1 = t_V_reg_431;

assign zext_ln681_1_fu_737_p1 = trunc_ln681_1_fu_733_p1;

assign zext_ln681_2_fu_771_p1 = grp_fu_585_p4;

assign zext_ln681_3_fu_841_p1 = grp_fu_585_p4;

assign zext_ln681_4_fu_875_p1 = grp_fu_595_p4;

assign zext_ln681_5_fu_945_p1 = grp_fu_595_p4;

assign zext_ln681_6_fu_979_p1 = grp_fu_605_p4;

assign zext_ln681_7_fu_1049_p1 = grp_fu_605_p4;

assign zext_ln681_fu_663_p1 = trunc_ln681_fu_659_p1;

endmodule //RadixSort_do_sort
