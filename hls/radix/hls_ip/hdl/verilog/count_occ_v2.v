// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module count_occ_v2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_src_address0,
        array_src_ce0,
        array_src_q0,
        c1_address0,
        c1_ce0,
        c1_we0,
        c1_d0,
        c1_q0,
        c1_address1,
        c1_ce1,
        c1_we1,
        c1_d1,
        c1_q1,
        c2_address0,
        c2_ce0,
        c2_we0,
        c2_d0,
        c2_q0,
        c2_address1,
        c2_ce1,
        c2_we1,
        c2_d1,
        c2_q1,
        c3_address0,
        c3_ce0,
        c3_we0,
        c3_d0,
        c3_q0,
        c3_address1,
        c3_ce1,
        c3_we1,
        c3_d1,
        c3_q1,
        c4_address0,
        c4_ce0,
        c4_we0,
        c4_d0,
        c4_q0,
        c4_address1,
        c4_ce1,
        c4_we1,
        c4_d1,
        c4_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] array_src_address0;
output   array_src_ce0;
input  [31:0] array_src_q0;
output  [7:0] c1_address0;
output   c1_ce0;
output   c1_we0;
output  [31:0] c1_d0;
input  [31:0] c1_q0;
output  [7:0] c1_address1;
output   c1_ce1;
output   c1_we1;
output  [31:0] c1_d1;
input  [31:0] c1_q1;
output  [7:0] c2_address0;
output   c2_ce0;
output   c2_we0;
output  [31:0] c2_d0;
input  [31:0] c2_q0;
output  [7:0] c2_address1;
output   c2_ce1;
output   c2_we1;
output  [31:0] c2_d1;
input  [31:0] c2_q1;
output  [7:0] c3_address0;
output   c3_ce0;
output   c3_we0;
output  [31:0] c3_d0;
input  [31:0] c3_q0;
output  [7:0] c3_address1;
output   c3_ce1;
output   c3_we1;
output  [31:0] c3_d1;
input  [31:0] c3_q1;
output  [7:0] c4_address0;
output   c4_ce0;
output   c4_we0;
output  [31:0] c4_d0;
input  [31:0] c4_q0;
output  [7:0] c4_address1;
output   c4_ce1;
output   c4_we1;
output  [31:0] c4_d1;
input  [31:0] c4_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_src_ce0;
reg[7:0] c1_address0;
reg c1_ce0;
reg c1_we0;
reg[7:0] c1_address1;
reg c1_ce1;
reg c1_we1;
reg[7:0] c2_address0;
reg c2_ce0;
reg c2_we0;
reg[7:0] c2_address1;
reg c2_ce1;
reg c2_we1;
reg[7:0] c3_address0;
reg c3_ce0;
reg c3_we0;
reg[7:0] c3_address1;
reg c3_ce1;
reg c3_we1;
reg[7:0] c4_address0;
reg c4_ce0;
reg c4_we0;
reg[7:0] c4_address1;
reg c4_ce1;
reg c4_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] i_2_fu_219_p2;
reg   [16:0] i_2_reg_369;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_213_p2;
reg   [7:0] c1_addr_reg_379;
wire    ap_CS_fsm_state3;
reg   [7:0] c2_addr_reg_384;
reg   [7:0] c3_addr_reg_389;
reg   [7:0] c4_addr_reg_394;
reg   [31:0] c1_load_reg_399;
wire    ap_CS_fsm_state4;
reg   [31:0] c2_load_reg_404;
reg   [31:0] c3_load_reg_409;
reg   [31:0] c4_load_reg_414;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_308_p2;
reg   [7:0] c1_addr_2_reg_427;
reg   [7:0] c2_addr_2_reg_437;
reg   [7:0] c3_addr_2_reg_447;
reg   [7:0] c4_addr_2_reg_457;
wire   [8:0] i_3_fu_336_p2;
reg   [8:0] i_3_reg_462;
wire   [31:0] tmp_12_fu_342_p2;
reg   [31:0] tmp_12_reg_467;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_13_fu_348_p2;
reg   [31:0] tmp_13_reg_472;
wire   [31:0] tmp_14_fu_354_p2;
reg   [31:0] tmp_14_reg_477;
wire   [31:0] tmp_15_fu_360_p2;
reg   [31:0] tmp_15_reg_482;
reg   [16:0] i_reg_191;
wire    ap_CS_fsm_state5;
reg   [8:0] i_1_reg_202;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_fu_225_p1;
wire   [63:0] tmp_7_fu_234_p1;
wire   [63:0] tmp_3_fu_249_p1;
wire   [63:0] tmp_s_fu_264_p1;
wire   [63:0] tmp_5_fu_279_p1;
wire   [63:0] tmp_10_fu_320_p1;
wire   [63:0] tmp_11_fu_328_p1;
wire   [7:0] tmp_17_fu_230_p1;
wire   [7:0] tmp_9_cast_fu_239_p4;
wire   [7:0] tmp_5_cast_fu_254_p4;
wire   [7:0] tmp_6_fu_269_p4;
wire   [8:0] tmp_1_fu_314_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_202 <= 9'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_reg_202 <= i_3_reg_462;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_191 <= i_2_reg_369;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_191 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        c1_addr_2_reg_427 <= tmp_11_fu_328_p1;
        c2_addr_2_reg_437 <= tmp_11_fu_328_p1;
        c3_addr_2_reg_447 <= tmp_11_fu_328_p1;
        c4_addr_2_reg_457 <= tmp_11_fu_328_p1;
        i_3_reg_462 <= i_3_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c1_addr_reg_379 <= tmp_7_fu_234_p1;
        c2_addr_reg_384 <= tmp_3_fu_249_p1;
        c3_addr_reg_389 <= tmp_s_fu_264_p1;
        c4_addr_reg_394 <= tmp_5_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c1_load_reg_399 <= c1_q0;
        c2_load_reg_404 <= c2_q0;
        c3_load_reg_409 <= c3_q0;
        c4_load_reg_414 <= c4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_369 <= i_2_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_12_reg_467 <= tmp_12_fu_342_p2;
        tmp_13_reg_472 <= tmp_13_fu_348_p2;
        tmp_14_reg_477 <= tmp_14_fu_354_p2;
        tmp_15_reg_482 <= tmp_15_fu_360_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_308_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_308_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_src_ce0 = 1'b1;
    end else begin
        array_src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_address0 = tmp_10_fu_320_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c1_address0 = c1_addr_reg_379;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c1_address0 = tmp_7_fu_234_p1;
    end else begin
        c1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c1_address1 = c1_addr_2_reg_427;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c1_address1 = tmp_11_fu_328_p1;
    end else begin
        c1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        c1_ce0 = 1'b1;
    end else begin
        c1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        c1_ce1 = 1'b1;
    end else begin
        c1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c1_we0 = 1'b1;
    end else begin
        c1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c1_we1 = 1'b1;
    end else begin
        c1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c2_address0 = tmp_10_fu_320_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c2_address0 = c2_addr_reg_384;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c2_address0 = tmp_3_fu_249_p1;
    end else begin
        c2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c2_address1 = c2_addr_2_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c2_address1 = tmp_11_fu_328_p1;
    end else begin
        c2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        c2_ce0 = 1'b1;
    end else begin
        c2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        c2_ce1 = 1'b1;
    end else begin
        c2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c2_we0 = 1'b1;
    end else begin
        c2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c2_we1 = 1'b1;
    end else begin
        c2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c3_address0 = tmp_10_fu_320_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c3_address0 = c3_addr_reg_389;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c3_address0 = tmp_s_fu_264_p1;
    end else begin
        c3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c3_address1 = c3_addr_2_reg_447;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c3_address1 = tmp_11_fu_328_p1;
    end else begin
        c3_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        c3_ce0 = 1'b1;
    end else begin
        c3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        c3_ce1 = 1'b1;
    end else begin
        c3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c3_we0 = 1'b1;
    end else begin
        c3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c3_we1 = 1'b1;
    end else begin
        c3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c4_address0 = tmp_10_fu_320_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c4_address0 = c4_addr_reg_394;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c4_address0 = tmp_5_fu_279_p1;
    end else begin
        c4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c4_address1 = c4_addr_2_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        c4_address1 = tmp_11_fu_328_p1;
    end else begin
        c4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        c4_ce0 = 1'b1;
    end else begin
        c4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        c4_ce1 = 1'b1;
    end else begin
        c4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c4_we0 = 1'b1;
    end else begin
        c4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c4_we1 = 1'b1;
    end else begin
        c4_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign array_src_address0 = tmp_fu_225_p1;

assign c1_d0 = (32'd1 + c1_load_reg_399);

assign c1_d1 = tmp_12_reg_467;

assign c2_d0 = (32'd1 + c2_load_reg_404);

assign c2_d1 = tmp_13_reg_472;

assign c3_d0 = (32'd1 + c3_load_reg_409);

assign c3_d1 = tmp_14_reg_477;

assign c4_d0 = (32'd1 + c4_load_reg_414);

assign c4_d1 = tmp_15_reg_482;

assign exitcond1_fu_213_p2 = ((i_reg_191 == 17'd65536) ? 1'b1 : 1'b0);

assign exitcond_fu_308_p2 = ((i_1_reg_202 == 9'd256) ? 1'b1 : 1'b0);

assign i_2_fu_219_p2 = (i_reg_191 + 17'd1);

assign i_3_fu_336_p2 = (i_1_reg_202 + 9'd1);

assign tmp_10_fu_320_p1 = tmp_1_fu_314_p2;

assign tmp_11_fu_328_p1 = i_1_reg_202;

assign tmp_12_fu_342_p2 = (c1_q0 + c1_q1);

assign tmp_13_fu_348_p2 = (c2_q0 + c2_q1);

assign tmp_14_fu_354_p2 = (c3_q0 + c3_q1);

assign tmp_15_fu_360_p2 = (c4_q0 + c4_q1);

assign tmp_17_fu_230_p1 = array_src_q0[7:0];

assign tmp_1_fu_314_p2 = ($signed(i_1_reg_202) + $signed(9'd511));

assign tmp_3_fu_249_p1 = tmp_9_cast_fu_239_p4;

assign tmp_5_cast_fu_254_p4 = {{array_src_q0[23:16]}};

assign tmp_5_fu_279_p1 = tmp_6_fu_269_p4;

assign tmp_6_fu_269_p4 = {{array_src_q0[31:24]}};

assign tmp_7_fu_234_p1 = tmp_17_fu_230_p1;

assign tmp_9_cast_fu_239_p4 = {{array_src_q0[15:8]}};

assign tmp_fu_225_p1 = i_reg_191;

assign tmp_s_fu_264_p1 = tmp_5_cast_fu_254_p4;

endmodule //count_occ_v2
