// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_radix,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.674000,HLS_SYN_LAT=1921807,HLS_SYN_TPT=none,HLS_SYN_MEM=264,HLS_SYN_DSP=0,HLS_SYN_FF=793,HLS_SYN_LUT=2053,HLS_VERSION=2018_2}" *)

module HLS_radix (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TKEEP,
        S_AXIS_TSTRB,
        S_AXIS_TUSER,
        S_AXIS_TLAST,
        S_AXIS_TID,
        S_AXIS_TDEST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TKEEP,
        M_AXIS_TSTRB,
        M_AXIS_TUSER,
        M_AXIS_TLAST,
        M_AXIS_TID,
        M_AXIS_TDEST
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input  [3:0] S_AXIS_TKEEP;
input  [3:0] S_AXIS_TSTRB;
input  [0:0] S_AXIS_TUSER;
input  [0:0] S_AXIS_TLAST;
input  [0:0] S_AXIS_TID;
input  [0:0] S_AXIS_TDEST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output  [3:0] M_AXIS_TKEEP;
output  [3:0] M_AXIS_TSTRB;
output  [0:0] M_AXIS_TUSER;
output  [0:0] M_AXIS_TLAST;
output  [0:0] M_AXIS_TID;
output  [0:0] M_AXIS_TDEST;

 reg    ap_rst_n_inv;
reg   [31:0] S_AXIS_V_data_V_0_data_out;
wire    S_AXIS_V_data_V_0_vld_in;
wire    S_AXIS_V_data_V_0_vld_out;
wire    S_AXIS_V_data_V_0_ack_in;
reg    S_AXIS_V_data_V_0_ack_out;
reg   [31:0] S_AXIS_V_data_V_0_payload_A;
reg   [31:0] S_AXIS_V_data_V_0_payload_B;
reg    S_AXIS_V_data_V_0_sel_rd;
reg    S_AXIS_V_data_V_0_sel_wr;
wire    S_AXIS_V_data_V_0_sel;
wire    S_AXIS_V_data_V_0_load_A;
wire    S_AXIS_V_data_V_0_load_B;
reg   [1:0] S_AXIS_V_data_V_0_state;
wire    S_AXIS_V_data_V_0_state_cmp_full;
wire    S_AXIS_V_dest_V_0_vld_in;
reg    S_AXIS_V_dest_V_0_ack_out;
reg   [1:0] S_AXIS_V_dest_V_0_state;
reg   [31:0] M_AXIS_V_data_V_1_data_out;
reg    M_AXIS_V_data_V_1_vld_in;
wire    M_AXIS_V_data_V_1_vld_out;
wire    M_AXIS_V_data_V_1_ack_in;
wire    M_AXIS_V_data_V_1_ack_out;
reg   [31:0] M_AXIS_V_data_V_1_payload_A;
reg   [31:0] M_AXIS_V_data_V_1_payload_B;
reg    M_AXIS_V_data_V_1_sel_rd;
reg    M_AXIS_V_data_V_1_sel_wr;
wire    M_AXIS_V_data_V_1_sel;
wire    M_AXIS_V_data_V_1_load_A;
wire    M_AXIS_V_data_V_1_load_B;
reg   [1:0] M_AXIS_V_data_V_1_state;
wire    M_AXIS_V_data_V_1_state_cmp_full;
wire   [3:0] M_AXIS_V_keep_V_1_data_out;
reg    M_AXIS_V_keep_V_1_vld_in;
wire    M_AXIS_V_keep_V_1_vld_out;
wire    M_AXIS_V_keep_V_1_ack_in;
wire    M_AXIS_V_keep_V_1_ack_out;
reg    M_AXIS_V_keep_V_1_sel_rd;
wire    M_AXIS_V_keep_V_1_sel;
reg   [1:0] M_AXIS_V_keep_V_1_state;
wire   [3:0] M_AXIS_V_strb_V_1_data_out;
reg    M_AXIS_V_strb_V_1_vld_in;
wire    M_AXIS_V_strb_V_1_vld_out;
wire    M_AXIS_V_strb_V_1_ack_in;
wire    M_AXIS_V_strb_V_1_ack_out;
reg    M_AXIS_V_strb_V_1_sel_rd;
wire    M_AXIS_V_strb_V_1_sel;
reg   [1:0] M_AXIS_V_strb_V_1_state;
wire   [0:0] M_AXIS_V_user_V_1_data_out;
reg    M_AXIS_V_user_V_1_vld_in;
wire    M_AXIS_V_user_V_1_vld_out;
wire    M_AXIS_V_user_V_1_ack_in;
wire    M_AXIS_V_user_V_1_ack_out;
reg    M_AXIS_V_user_V_1_sel_rd;
wire    M_AXIS_V_user_V_1_sel;
reg   [1:0] M_AXIS_V_user_V_1_state;
wire   [0:0] M_AXIS_V_last_V_1_data_out;
reg    M_AXIS_V_last_V_1_vld_in;
wire    M_AXIS_V_last_V_1_vld_out;
wire    M_AXIS_V_last_V_1_ack_in;
wire    M_AXIS_V_last_V_1_ack_out;
reg    M_AXIS_V_last_V_1_sel_rd;
wire    M_AXIS_V_last_V_1_sel;
reg   [1:0] M_AXIS_V_last_V_1_state;
wire   [0:0] M_AXIS_V_id_V_1_data_out;
reg    M_AXIS_V_id_V_1_vld_in;
wire    M_AXIS_V_id_V_1_vld_out;
wire    M_AXIS_V_id_V_1_ack_in;
wire    M_AXIS_V_id_V_1_ack_out;
reg    M_AXIS_V_id_V_1_sel_rd;
wire    M_AXIS_V_id_V_1_sel;
reg   [1:0] M_AXIS_V_id_V_1_state;
wire   [0:0] M_AXIS_V_dest_V_1_data_out;
reg    M_AXIS_V_dest_V_1_vld_in;
wire    M_AXIS_V_dest_V_1_vld_out;
wire    M_AXIS_V_dest_V_1_ack_in;
wire    M_AXIS_V_dest_V_1_ack_out;
reg    M_AXIS_V_dest_V_1_sel_rd;
wire    M_AXIS_V_dest_V_1_sel;
reg   [1:0] M_AXIS_V_dest_V_1_state;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire   [15:0] indvarinc_fu_356_p2;
wire    ap_CS_fsm_state2;
wire   [15:0] i_4_fu_379_p2;
reg   [15:0] i_4_reg_491;
wire    ap_CS_fsm_state3;
wire   [7:0] indvarinc_i_fu_395_p2;
wire    ap_CS_fsm_state5;
wire   [7:0] indvarinc3_i_fu_412_p2;
wire    ap_CS_fsm_state6;
wire   [7:0] indvarinc6_i_fu_429_p2;
wire    ap_CS_fsm_state7;
wire   [7:0] indvarinc9_i_fu_446_p2;
wire    ap_CS_fsm_state8;
wire   [15:0] i_5_fu_469_p2;
reg   [15:0] i_5_reg_531;
wire    ap_CS_fsm_state19;
reg    ap_block_state19;
wire   [0:0] exitcond_fu_463_p2;
wire   [31:0] tab_q0;
reg   [15:0] array2_address0;
reg    array2_ce0;
reg    array2_we0;
wire   [31:0] array2_q0;
reg   [7:0] count_1_address0;
reg    count_1_ce0;
reg    count_1_we0;
reg   [31:0] count_1_d0;
wire   [31:0] count_1_q0;
reg    count_1_ce1;
reg    count_1_we1;
wire   [31:0] count_1_q1;
reg   [7:0] count_2_address0;
reg    count_2_ce0;
reg    count_2_we0;
reg   [31:0] count_2_d0;
wire   [31:0] count_2_q0;
reg    count_2_ce1;
reg    count_2_we1;
wire   [31:0] count_2_q1;
reg   [7:0] count_3_address0;
reg    count_3_ce0;
reg    count_3_we0;
reg   [31:0] count_3_d0;
wire   [31:0] count_3_q0;
reg    count_3_ce1;
reg    count_3_we1;
wire   [31:0] count_3_q1;
reg   [7:0] count_4_address0;
reg    count_4_ce0;
reg    count_4_we0;
reg   [31:0] count_4_d0;
wire   [31:0] count_4_q0;
reg    count_4_ce1;
reg    count_4_we1;
wire   [31:0] count_4_q1;
reg   [15:0] tab_address0;
reg    tab_ce0;
reg    tab_we0;
reg   [31:0] tab_d0;
wire    grp_count_occ_v2_fu_335_ap_start;
wire    grp_count_occ_v2_fu_335_ap_done;
wire    grp_count_occ_v2_fu_335_ap_idle;
wire    grp_count_occ_v2_fu_335_ap_ready;
wire   [15:0] grp_count_occ_v2_fu_335_array_src_address0;
wire    grp_count_occ_v2_fu_335_array_src_ce0;
wire   [7:0] grp_count_occ_v2_fu_335_c1_address0;
wire    grp_count_occ_v2_fu_335_c1_ce0;
wire    grp_count_occ_v2_fu_335_c1_we0;
wire   [31:0] grp_count_occ_v2_fu_335_c1_d0;
wire   [7:0] grp_count_occ_v2_fu_335_c1_address1;
wire    grp_count_occ_v2_fu_335_c1_ce1;
wire    grp_count_occ_v2_fu_335_c1_we1;
wire   [31:0] grp_count_occ_v2_fu_335_c1_d1;
wire   [7:0] grp_count_occ_v2_fu_335_c2_address0;
wire    grp_count_occ_v2_fu_335_c2_ce0;
wire    grp_count_occ_v2_fu_335_c2_we0;
wire   [31:0] grp_count_occ_v2_fu_335_c2_d0;
wire   [7:0] grp_count_occ_v2_fu_335_c2_address1;
wire    grp_count_occ_v2_fu_335_c2_ce1;
wire    grp_count_occ_v2_fu_335_c2_we1;
wire   [31:0] grp_count_occ_v2_fu_335_c2_d1;
wire   [7:0] grp_count_occ_v2_fu_335_c3_address0;
wire    grp_count_occ_v2_fu_335_c3_ce0;
wire    grp_count_occ_v2_fu_335_c3_we0;
wire   [31:0] grp_count_occ_v2_fu_335_c3_d0;
wire   [7:0] grp_count_occ_v2_fu_335_c3_address1;
wire    grp_count_occ_v2_fu_335_c3_ce1;
wire    grp_count_occ_v2_fu_335_c3_we1;
wire   [31:0] grp_count_occ_v2_fu_335_c3_d1;
wire   [7:0] grp_count_occ_v2_fu_335_c4_address0;
wire    grp_count_occ_v2_fu_335_c4_ce0;
wire    grp_count_occ_v2_fu_335_c4_we0;
wire   [31:0] grp_count_occ_v2_fu_335_c4_d0;
wire   [7:0] grp_count_occ_v2_fu_335_c4_address1;
wire    grp_count_occ_v2_fu_335_c4_ce1;
wire    grp_count_occ_v2_fu_335_c4_we1;
wire   [31:0] grp_count_occ_v2_fu_335_c4_d1;
wire    grp_sort_occ_v2_fu_344_ap_start;
wire    grp_sort_occ_v2_fu_344_ap_done;
wire    grp_sort_occ_v2_fu_344_ap_idle;
wire    grp_sort_occ_v2_fu_344_ap_ready;
wire   [15:0] grp_sort_occ_v2_fu_344_array_src_address0;
wire    grp_sort_occ_v2_fu_344_array_src_ce0;
reg   [31:0] grp_sort_occ_v2_fu_344_array_src_q0;
wire   [15:0] grp_sort_occ_v2_fu_344_array_dst_address0;
wire    grp_sort_occ_v2_fu_344_array_dst_ce0;
wire    grp_sort_occ_v2_fu_344_array_dst_we0;
wire   [31:0] grp_sort_occ_v2_fu_344_array_dst_d0;
reg   [5:0] grp_sort_occ_v2_fu_344_shift;
wire   [7:0] grp_sort_occ_v2_fu_344_count_address0;
wire    grp_sort_occ_v2_fu_344_count_ce0;
wire    grp_sort_occ_v2_fu_344_count_we0;
wire   [31:0] grp_sort_occ_v2_fu_344_count_d0;
reg   [31:0] grp_sort_occ_v2_fu_344_count_q0;
reg   [15:0] invdar_reg_257;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_s_fu_367_p2;
reg   [15:0] i_reg_268;
reg   [7:0] invdar_i_reg_280;
wire   [0:0] tmp_i_16_fu_406_p2;
wire   [0:0] exitcond1_fu_373_p2;
reg   [7:0] invdar2_i_reg_291;
wire   [0:0] tmp_2_i_fu_423_p2;
reg   [7:0] invdar5_i_reg_302;
wire   [0:0] tmp_4_i_fu_440_p2;
reg   [7:0] invdar8_i_reg_313;
wire   [0:0] tmp_6_i_fu_457_p2;
reg   [15:0] i_1_reg_324;
wire    ap_CS_fsm_state18;
reg    grp_count_occ_v2_fu_335_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_sort_occ_v2_fu_344_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire   [63:0] tmp_fu_362_p1;
wire   [63:0] tmp_16_fu_390_p1;
wire   [63:0] tmp_i_fu_401_p1;
wire   [63:0] tmp_1_i_fu_418_p1;
wire   [63:0] tmp_3_i_fu_435_p1;
wire   [63:0] tmp_5_i_fu_452_p1;
wire   [63:0] tmp_17_fu_475_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 S_AXIS_V_data_V_0_sel_rd = 1'b0;
#0 S_AXIS_V_data_V_0_sel_wr = 1'b0;
#0 S_AXIS_V_data_V_0_state = 2'd0;
#0 S_AXIS_V_dest_V_0_state = 2'd0;
#0 M_AXIS_V_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_data_V_1_state = 2'd0;
#0 M_AXIS_V_keep_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_keep_V_1_state = 2'd0;
#0 M_AXIS_V_strb_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_strb_V_1_state = 2'd0;
#0 M_AXIS_V_user_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_user_V_1_state = 2'd0;
#0 M_AXIS_V_last_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_last_V_1_state = 2'd0;
#0 M_AXIS_V_id_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_id_V_1_state = 2'd0;
#0 M_AXIS_V_dest_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 21'd1;
#0 grp_count_occ_v2_fu_335_ap_start_reg = 1'b0;
#0 grp_sort_occ_v2_fu_344_ap_start_reg = 1'b0;
end

HLS_radix_array2 #(
    .DataWidth( 32 ),
    .AddressRange( 64000 ),
    .AddressWidth( 16 ))
array2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(array2_address0),
    .ce0(array2_ce0),
    .we0(array2_we0),
    .d0(grp_sort_occ_v2_fu_344_array_dst_d0),
    .q0(array2_q0)
);

HLS_radix_count_1 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(count_1_address0),
    .ce0(count_1_ce0),
    .we0(count_1_we0),
    .d0(count_1_d0),
    .q0(count_1_q0),
    .address1(grp_count_occ_v2_fu_335_c1_address1),
    .ce1(count_1_ce1),
    .we1(count_1_we1),
    .d1(grp_count_occ_v2_fu_335_c1_d1),
    .q1(count_1_q1)
);

HLS_radix_count_1 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(count_2_address0),
    .ce0(count_2_ce0),
    .we0(count_2_we0),
    .d0(count_2_d0),
    .q0(count_2_q0),
    .address1(grp_count_occ_v2_fu_335_c2_address1),
    .ce1(count_2_ce1),
    .we1(count_2_we1),
    .d1(grp_count_occ_v2_fu_335_c2_d1),
    .q1(count_2_q1)
);

HLS_radix_count_1 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(count_3_address0),
    .ce0(count_3_ce0),
    .we0(count_3_we0),
    .d0(count_3_d0),
    .q0(count_3_q0),
    .address1(grp_count_occ_v2_fu_335_c3_address1),
    .ce1(count_3_ce1),
    .we1(count_3_we1),
    .d1(grp_count_occ_v2_fu_335_c3_d1),
    .q1(count_3_q1)
);

HLS_radix_count_1 #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
count_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(count_4_address0),
    .ce0(count_4_ce0),
    .we0(count_4_we0),
    .d0(count_4_d0),
    .q0(count_4_q0),
    .address1(grp_count_occ_v2_fu_335_c4_address1),
    .ce1(count_4_ce1),
    .we1(count_4_we1),
    .d1(grp_count_occ_v2_fu_335_c4_d1),
    .q1(count_4_q1)
);

HLS_radix_array2 #(
    .DataWidth( 32 ),
    .AddressRange( 64000 ),
    .AddressWidth( 16 ))
tab_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tab_address0),
    .ce0(tab_ce0),
    .we0(tab_we0),
    .d0(tab_d0),
    .q0(tab_q0)
);

count_occ_v2 grp_count_occ_v2_fu_335(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_count_occ_v2_fu_335_ap_start),
    .ap_done(grp_count_occ_v2_fu_335_ap_done),
    .ap_idle(grp_count_occ_v2_fu_335_ap_idle),
    .ap_ready(grp_count_occ_v2_fu_335_ap_ready),
    .array_src_address0(grp_count_occ_v2_fu_335_array_src_address0),
    .array_src_ce0(grp_count_occ_v2_fu_335_array_src_ce0),
    .array_src_q0(tab_q0),
    .c1_address0(grp_count_occ_v2_fu_335_c1_address0),
    .c1_ce0(grp_count_occ_v2_fu_335_c1_ce0),
    .c1_we0(grp_count_occ_v2_fu_335_c1_we0),
    .c1_d0(grp_count_occ_v2_fu_335_c1_d0),
    .c1_q0(count_1_q0),
    .c1_address1(grp_count_occ_v2_fu_335_c1_address1),
    .c1_ce1(grp_count_occ_v2_fu_335_c1_ce1),
    .c1_we1(grp_count_occ_v2_fu_335_c1_we1),
    .c1_d1(grp_count_occ_v2_fu_335_c1_d1),
    .c1_q1(count_1_q1),
    .c2_address0(grp_count_occ_v2_fu_335_c2_address0),
    .c2_ce0(grp_count_occ_v2_fu_335_c2_ce0),
    .c2_we0(grp_count_occ_v2_fu_335_c2_we0),
    .c2_d0(grp_count_occ_v2_fu_335_c2_d0),
    .c2_q0(count_2_q0),
    .c2_address1(grp_count_occ_v2_fu_335_c2_address1),
    .c2_ce1(grp_count_occ_v2_fu_335_c2_ce1),
    .c2_we1(grp_count_occ_v2_fu_335_c2_we1),
    .c2_d1(grp_count_occ_v2_fu_335_c2_d1),
    .c2_q1(count_2_q1),
    .c3_address0(grp_count_occ_v2_fu_335_c3_address0),
    .c3_ce0(grp_count_occ_v2_fu_335_c3_ce0),
    .c3_we0(grp_count_occ_v2_fu_335_c3_we0),
    .c3_d0(grp_count_occ_v2_fu_335_c3_d0),
    .c3_q0(count_3_q0),
    .c3_address1(grp_count_occ_v2_fu_335_c3_address1),
    .c3_ce1(grp_count_occ_v2_fu_335_c3_ce1),
    .c3_we1(grp_count_occ_v2_fu_335_c3_we1),
    .c3_d1(grp_count_occ_v2_fu_335_c3_d1),
    .c3_q1(count_3_q1),
    .c4_address0(grp_count_occ_v2_fu_335_c4_address0),
    .c4_ce0(grp_count_occ_v2_fu_335_c4_ce0),
    .c4_we0(grp_count_occ_v2_fu_335_c4_we0),
    .c4_d0(grp_count_occ_v2_fu_335_c4_d0),
    .c4_q0(count_4_q0),
    .c4_address1(grp_count_occ_v2_fu_335_c4_address1),
    .c4_ce1(grp_count_occ_v2_fu_335_c4_ce1),
    .c4_we1(grp_count_occ_v2_fu_335_c4_we1),
    .c4_d1(grp_count_occ_v2_fu_335_c4_d1),
    .c4_q1(count_4_q1)
);

sort_occ_v2 grp_sort_occ_v2_fu_344(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sort_occ_v2_fu_344_ap_start),
    .ap_done(grp_sort_occ_v2_fu_344_ap_done),
    .ap_idle(grp_sort_occ_v2_fu_344_ap_idle),
    .ap_ready(grp_sort_occ_v2_fu_344_ap_ready),
    .array_src_address0(grp_sort_occ_v2_fu_344_array_src_address0),
    .array_src_ce0(grp_sort_occ_v2_fu_344_array_src_ce0),
    .array_src_q0(grp_sort_occ_v2_fu_344_array_src_q0),
    .array_dst_address0(grp_sort_occ_v2_fu_344_array_dst_address0),
    .array_dst_ce0(grp_sort_occ_v2_fu_344_array_dst_ce0),
    .array_dst_we0(grp_sort_occ_v2_fu_344_array_dst_we0),
    .array_dst_d0(grp_sort_occ_v2_fu_344_array_dst_d0),
    .shift(grp_sort_occ_v2_fu_344_shift),
    .count_address0(grp_sort_occ_v2_fu_344_count_address0),
    .count_ce0(grp_sort_occ_v2_fu_344_count_ce0),
    .count_we0(grp_sort_occ_v2_fu_344_count_we0),
    .count_d0(grp_sort_occ_v2_fu_344_count_d0),
    .count_q0(grp_sort_occ_v2_fu_344_count_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_V_1_ack_out) & (1'b1 == M_AXIS_V_data_V_1_vld_out))) begin
            M_AXIS_V_data_V_1_sel_rd <= ~M_AXIS_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == M_AXIS_V_data_V_1_vld_in))) begin
            M_AXIS_V_data_V_1_sel_wr <= ~M_AXIS_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_vld_in)) | ((2'd3 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_vld_in) & (1'b1 == M_AXIS_V_data_V_1_ack_out)))) begin
            M_AXIS_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_ack_out)) | ((2'd3 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_ack_out) & (1'b1 == M_AXIS_V_data_V_1_vld_in)))) begin
            M_AXIS_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_data_V_1_vld_in) & (1'b1 == M_AXIS_V_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_data_V_1_ack_out) & (1'b1 == M_AXIS_V_data_V_1_vld_in)) & (2'd3 == M_AXIS_V_data_V_1_state)) | ((2'd1 == M_AXIS_V_data_V_1_state) & (1'b1 == M_AXIS_V_data_V_1_ack_out)) | ((2'd2 == M_AXIS_V_data_V_1_state) & (1'b1 == M_AXIS_V_data_V_1_vld_in)))) begin
            M_AXIS_V_data_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_dest_V_1_ack_out) & (1'b1 == M_AXIS_V_dest_V_1_vld_out))) begin
            M_AXIS_V_dest_V_1_sel_rd <= ~M_AXIS_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_vld_in)) | ((2'd3 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_vld_in) & (1'b1 == M_AXIS_V_dest_V_1_ack_out)))) begin
            M_AXIS_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_ack_out)) | ((2'd3 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_ack_out) & (1'b1 == M_AXIS_V_dest_V_1_vld_in)))) begin
            M_AXIS_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_dest_V_1_vld_in) & (1'b1 == M_AXIS_V_dest_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_dest_V_1_ack_out) & (1'b1 == M_AXIS_V_dest_V_1_vld_in)) & (2'd3 == M_AXIS_V_dest_V_1_state)) | ((2'd1 == M_AXIS_V_dest_V_1_state) & (1'b1 == M_AXIS_V_dest_V_1_ack_out)) | ((2'd2 == M_AXIS_V_dest_V_1_state) & (1'b1 == M_AXIS_V_dest_V_1_vld_in)))) begin
            M_AXIS_V_dest_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_id_V_1_ack_out) & (1'b1 == M_AXIS_V_id_V_1_vld_out))) begin
            M_AXIS_V_id_V_1_sel_rd <= ~M_AXIS_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_vld_in)) | ((2'd3 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_vld_in) & (1'b1 == M_AXIS_V_id_V_1_ack_out)))) begin
            M_AXIS_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_ack_out)) | ((2'd3 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_ack_out) & (1'b1 == M_AXIS_V_id_V_1_vld_in)))) begin
            M_AXIS_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_id_V_1_vld_in) & (1'b1 == M_AXIS_V_id_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_id_V_1_ack_out) & (1'b1 == M_AXIS_V_id_V_1_vld_in)) & (2'd3 == M_AXIS_V_id_V_1_state)) | ((2'd1 == M_AXIS_V_id_V_1_state) & (1'b1 == M_AXIS_V_id_V_1_ack_out)) | ((2'd2 == M_AXIS_V_id_V_1_state) & (1'b1 == M_AXIS_V_id_V_1_vld_in)))) begin
            M_AXIS_V_id_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_keep_V_1_ack_out) & (1'b1 == M_AXIS_V_keep_V_1_vld_out))) begin
            M_AXIS_V_keep_V_1_sel_rd <= ~M_AXIS_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_vld_in)) | ((2'd3 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_vld_in) & (1'b1 == M_AXIS_V_keep_V_1_ack_out)))) begin
            M_AXIS_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_ack_out)) | ((2'd3 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_ack_out) & (1'b1 == M_AXIS_V_keep_V_1_vld_in)))) begin
            M_AXIS_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_keep_V_1_vld_in) & (1'b1 == M_AXIS_V_keep_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_keep_V_1_ack_out) & (1'b1 == M_AXIS_V_keep_V_1_vld_in)) & (2'd3 == M_AXIS_V_keep_V_1_state)) | ((2'd1 == M_AXIS_V_keep_V_1_state) & (1'b1 == M_AXIS_V_keep_V_1_ack_out)) | ((2'd2 == M_AXIS_V_keep_V_1_state) & (1'b1 == M_AXIS_V_keep_V_1_vld_in)))) begin
            M_AXIS_V_keep_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_last_V_1_ack_out) & (1'b1 == M_AXIS_V_last_V_1_vld_out))) begin
            M_AXIS_V_last_V_1_sel_rd <= ~M_AXIS_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_vld_in)) | ((2'd3 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_vld_in) & (1'b1 == M_AXIS_V_last_V_1_ack_out)))) begin
            M_AXIS_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_ack_out)) | ((2'd3 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_ack_out) & (1'b1 == M_AXIS_V_last_V_1_vld_in)))) begin
            M_AXIS_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_last_V_1_vld_in) & (1'b1 == M_AXIS_V_last_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_last_V_1_ack_out) & (1'b1 == M_AXIS_V_last_V_1_vld_in)) & (2'd3 == M_AXIS_V_last_V_1_state)) | ((2'd1 == M_AXIS_V_last_V_1_state) & (1'b1 == M_AXIS_V_last_V_1_ack_out)) | ((2'd2 == M_AXIS_V_last_V_1_state) & (1'b1 == M_AXIS_V_last_V_1_vld_in)))) begin
            M_AXIS_V_last_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_strb_V_1_ack_out) & (1'b1 == M_AXIS_V_strb_V_1_vld_out))) begin
            M_AXIS_V_strb_V_1_sel_rd <= ~M_AXIS_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_vld_in)) | ((2'd3 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_vld_in) & (1'b1 == M_AXIS_V_strb_V_1_ack_out)))) begin
            M_AXIS_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_ack_out)) | ((2'd3 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_ack_out) & (1'b1 == M_AXIS_V_strb_V_1_vld_in)))) begin
            M_AXIS_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_strb_V_1_vld_in) & (1'b1 == M_AXIS_V_strb_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_strb_V_1_ack_out) & (1'b1 == M_AXIS_V_strb_V_1_vld_in)) & (2'd3 == M_AXIS_V_strb_V_1_state)) | ((2'd1 == M_AXIS_V_strb_V_1_state) & (1'b1 == M_AXIS_V_strb_V_1_ack_out)) | ((2'd2 == M_AXIS_V_strb_V_1_state) & (1'b1 == M_AXIS_V_strb_V_1_vld_in)))) begin
            M_AXIS_V_strb_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_user_V_1_ack_out) & (1'b1 == M_AXIS_V_user_V_1_vld_out))) begin
            M_AXIS_V_user_V_1_sel_rd <= ~M_AXIS_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_vld_in)) | ((2'd3 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_vld_in) & (1'b1 == M_AXIS_V_user_V_1_ack_out)))) begin
            M_AXIS_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_ack_out)) | ((2'd3 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_ack_out) & (1'b1 == M_AXIS_V_user_V_1_vld_in)))) begin
            M_AXIS_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_user_V_1_vld_in) & (1'b1 == M_AXIS_V_user_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_user_V_1_ack_out) & (1'b1 == M_AXIS_V_user_V_1_vld_in)) & (2'd3 == M_AXIS_V_user_V_1_state)) | ((2'd1 == M_AXIS_V_user_V_1_state) & (1'b1 == M_AXIS_V_user_V_1_ack_out)) | ((2'd2 == M_AXIS_V_user_V_1_state) & (1'b1 == M_AXIS_V_user_V_1_vld_in)))) begin
            M_AXIS_V_user_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_V_0_ack_out) & (1'b1 == S_AXIS_V_data_V_0_vld_out))) begin
            S_AXIS_V_data_V_0_sel_rd <= ~S_AXIS_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_V_0_ack_in) & (1'b1 == S_AXIS_V_data_V_0_vld_in))) begin
            S_AXIS_V_data_V_0_sel_wr <= ~S_AXIS_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_vld_in)) | ((2'd3 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_vld_in) & (1'b1 == S_AXIS_V_data_V_0_ack_out)))) begin
            S_AXIS_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_ack_out)) | ((2'd3 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_ack_out) & (1'b1 == S_AXIS_V_data_V_0_vld_in)))) begin
            S_AXIS_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_data_V_0_vld_in) & (1'b1 == S_AXIS_V_data_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_data_V_0_ack_out) & (1'b1 == S_AXIS_V_data_V_0_vld_in)) & (2'd3 == S_AXIS_V_data_V_0_state)) | ((2'd1 == S_AXIS_V_data_V_0_state) & (1'b1 == S_AXIS_V_data_V_0_ack_out)) | ((2'd2 == S_AXIS_V_data_V_0_state) & (1'b1 == S_AXIS_V_data_V_0_vld_in)))) begin
            S_AXIS_V_data_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_vld_in)) | ((2'd3 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_vld_in) & (1'b1 == S_AXIS_V_dest_V_0_ack_out)))) begin
            S_AXIS_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_ack_out)) | ((2'd3 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_ack_out) & (1'b1 == S_AXIS_V_dest_V_0_vld_in)))) begin
            S_AXIS_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_dest_V_0_vld_in) & (1'b1 == S_AXIS_V_dest_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_dest_V_0_ack_out) & (1'b1 == S_AXIS_V_dest_V_0_vld_in)) & (2'd3 == S_AXIS_V_dest_V_0_state)) | ((2'd1 == S_AXIS_V_dest_V_0_state) & (1'b1 == S_AXIS_V_dest_V_0_ack_out)) | ((2'd2 == S_AXIS_V_dest_V_0_state) & (1'b1 == S_AXIS_V_dest_V_0_vld_in)))) begin
            S_AXIS_V_dest_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_count_occ_v2_fu_335_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_count_occ_v2_fu_335_ap_start_reg <= 1'b1;
        end else if ((grp_count_occ_v2_fu_335_ap_ready == 1'b1)) begin
            grp_count_occ_v2_fu_335_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sort_occ_v2_fu_344_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
            grp_sort_occ_v2_fu_344_ap_start_reg <= 1'b1;
        end else if ((grp_sort_occ_v2_fu_344_ap_ready == 1'b1)) begin
            grp_sort_occ_v2_fu_344_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state21))) begin
        i_1_reg_324 <= i_5_reg_531;
    end else if (((1'b1 == ap_CS_fsm_state18) & (grp_sort_occ_v2_fu_344_ap_done == 1'b1))) begin
        i_1_reg_324 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_268 <= 16'd0;
    end else if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_268 <= i_4_reg_491;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_16_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        invdar2_i_reg_291 <= 8'd0;
    end else if (((tmp_2_i_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        invdar2_i_reg_291 <= indvarinc3_i_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_i_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        invdar5_i_reg_302 <= 8'd0;
    end else if (((tmp_4_i_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        invdar5_i_reg_302 <= indvarinc6_i_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_i_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        invdar8_i_reg_313 <= 8'd0;
    end else if (((tmp_6_i_fu_457_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        invdar8_i_reg_313 <= indvarinc9_i_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        invdar_i_reg_280 <= 8'd0;
    end else if (((tmp_i_16_fu_406_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        invdar_i_reg_280 <= indvarinc_i_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_367_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_257 <= indvarinc_fu_356_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        invdar_reg_257 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_V_1_load_A)) begin
        M_AXIS_V_data_V_1_payload_A <= tab_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_V_1_load_B)) begin
        M_AXIS_V_data_V_1_payload_B <= tab_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_V_0_load_A)) begin
        S_AXIS_V_data_V_0_payload_A <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_V_0_load_B)) begin
        S_AXIS_V_data_V_0_payload_B <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_reg_491 <= i_4_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state19))) begin
        i_5_reg_531 <= i_5_fu_469_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_V_data_V_1_state[1'd1];
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_data_V_1_sel)) begin
        M_AXIS_V_data_V_1_data_out = M_AXIS_V_data_V_1_payload_B;
    end else begin
        M_AXIS_V_data_V_1_data_out = M_AXIS_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_V_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_V_dest_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_V_id_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_V_keep_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_V_last_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_V_strb_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
        M_AXIS_V_user_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        S_AXIS_TDATA_blk_n = S_AXIS_V_data_V_0_state[1'd0];
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_data_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_data_V_0_sel)) begin
        S_AXIS_V_data_V_0_data_out = S_AXIS_V_data_V_0_payload_B;
    end else begin
        S_AXIS_V_data_V_0_data_out = S_AXIS_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_dest_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        array2_address0 = grp_sort_occ_v2_fu_344_array_dst_address0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        array2_address0 = grp_sort_occ_v2_fu_344_array_src_address0;
    end else begin
        array2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        array2_ce0 = grp_sort_occ_v2_fu_344_array_dst_ce0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        array2_ce0 = grp_sort_occ_v2_fu_344_array_src_ce0;
    end else begin
        array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        array2_we0 = grp_sort_occ_v2_fu_344_array_dst_we0;
    end else begin
        array2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        count_1_address0 = tmp_i_fu_401_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        count_1_address0 = grp_sort_occ_v2_fu_344_count_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_1_address0 = grp_count_occ_v2_fu_335_c1_address0;
    end else begin
        count_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        count_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        count_1_ce0 = grp_sort_occ_v2_fu_344_count_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_1_ce0 = grp_count_occ_v2_fu_335_c1_ce0;
    end else begin
        count_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_1_ce1 = grp_count_occ_v2_fu_335_c1_ce1;
    end else begin
        count_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        count_1_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        count_1_d0 = grp_sort_occ_v2_fu_344_count_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_1_d0 = grp_count_occ_v2_fu_335_c1_d0;
    end else begin
        count_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        count_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        count_1_we0 = grp_sort_occ_v2_fu_344_count_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_1_we0 = grp_count_occ_v2_fu_335_c1_we0;
    end else begin
        count_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_1_we1 = grp_count_occ_v2_fu_335_c1_we1;
    end else begin
        count_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_2_address0 = tmp_1_i_fu_418_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        count_2_address0 = grp_sort_occ_v2_fu_344_count_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_2_address0 = grp_count_occ_v2_fu_335_c2_address0;
    end else begin
        count_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        count_2_ce0 = grp_sort_occ_v2_fu_344_count_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_2_ce0 = grp_count_occ_v2_fu_335_c2_ce0;
    end else begin
        count_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_2_ce1 = grp_count_occ_v2_fu_335_c2_ce1;
    end else begin
        count_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_2_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        count_2_d0 = grp_sort_occ_v2_fu_344_count_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_2_d0 = grp_count_occ_v2_fu_335_c2_d0;
    end else begin
        count_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_2_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        count_2_we0 = grp_sort_occ_v2_fu_344_count_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_2_we0 = grp_count_occ_v2_fu_335_c2_we0;
    end else begin
        count_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_2_we1 = grp_count_occ_v2_fu_335_c2_we1;
    end else begin
        count_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        count_3_address0 = tmp_3_i_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        count_3_address0 = grp_sort_occ_v2_fu_344_count_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_3_address0 = grp_count_occ_v2_fu_335_c3_address0;
    end else begin
        count_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        count_3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        count_3_ce0 = grp_sort_occ_v2_fu_344_count_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_3_ce0 = grp_count_occ_v2_fu_335_c3_ce0;
    end else begin
        count_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_3_ce1 = grp_count_occ_v2_fu_335_c3_ce1;
    end else begin
        count_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        count_3_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        count_3_d0 = grp_sort_occ_v2_fu_344_count_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_3_d0 = grp_count_occ_v2_fu_335_c3_d0;
    end else begin
        count_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        count_3_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        count_3_we0 = grp_sort_occ_v2_fu_344_count_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_3_we0 = grp_count_occ_v2_fu_335_c3_we0;
    end else begin
        count_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_3_we1 = grp_count_occ_v2_fu_335_c3_we1;
    end else begin
        count_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count_4_address0 = tmp_5_i_fu_452_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        count_4_address0 = grp_sort_occ_v2_fu_344_count_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_4_address0 = grp_count_occ_v2_fu_335_c4_address0;
    end else begin
        count_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        count_4_ce0 = grp_sort_occ_v2_fu_344_count_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_4_ce0 = grp_count_occ_v2_fu_335_c4_ce0;
    end else begin
        count_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_4_ce1 = grp_count_occ_v2_fu_335_c4_ce1;
    end else begin
        count_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count_4_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        count_4_d0 = grp_sort_occ_v2_fu_344_count_d0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_4_d0 = grp_count_occ_v2_fu_335_c4_d0;
    end else begin
        count_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        count_4_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        count_4_we0 = grp_sort_occ_v2_fu_344_count_we0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        count_4_we0 = grp_count_occ_v2_fu_335_c4_we0;
    end else begin
        count_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        count_4_we1 = grp_count_occ_v2_fu_335_c4_we1;
    end else begin
        count_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_sort_occ_v2_fu_344_array_src_q0 = array2_q0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_sort_occ_v2_fu_344_array_src_q0 = tab_q0;
    end else begin
        grp_sort_occ_v2_fu_344_array_src_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_sort_occ_v2_fu_344_count_q0 = count_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_sort_occ_v2_fu_344_count_q0 = count_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_sort_occ_v2_fu_344_count_q0 = count_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_sort_occ_v2_fu_344_count_q0 = count_1_q0;
    end else begin
        grp_sort_occ_v2_fu_344_count_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_sort_occ_v2_fu_344_shift = 6'd24;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_sort_occ_v2_fu_344_shift = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_sort_occ_v2_fu_344_shift = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_sort_occ_v2_fu_344_shift = 6'd0;
    end else begin
        grp_sort_occ_v2_fu_344_shift = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tab_address0 = tmp_17_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tab_address0 = tmp_16_fu_390_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tab_address0 = tmp_fu_362_p1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        tab_address0 = grp_sort_occ_v2_fu_344_array_dst_address0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        tab_address0 = grp_sort_occ_v2_fu_344_array_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tab_address0 = grp_count_occ_v2_fu_335_array_src_address0;
    end else begin
        tab_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4)))) begin
        tab_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        tab_ce0 = grp_sort_occ_v2_fu_344_array_dst_ce0;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        tab_ce0 = grp_sort_occ_v2_fu_344_array_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tab_ce0 = grp_count_occ_v2_fu_335_array_src_ce0;
    end else begin
        tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tab_d0 = S_AXIS_V_data_V_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tab_d0 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        tab_d0 = grp_sort_occ_v2_fu_344_array_dst_d0;
    end else begin
        tab_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4)))) begin
        tab_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        tab_we0 = grp_sort_occ_v2_fu_344_array_dst_we0;
    end else begin
        tab_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_i_16_fu_406_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_2_i_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_4_i_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_6_i_fu_457_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_count_occ_v2_fu_335_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_sort_occ_v2_fu_344_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_sort_occ_v2_fu_344_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_sort_occ_v2_fu_344_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_sort_occ_v2_fu_344_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (exitcond_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (exitcond_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = M_AXIS_V_data_V_1_data_out;

assign M_AXIS_TDEST = M_AXIS_V_dest_V_1_data_out;

assign M_AXIS_TID = M_AXIS_V_id_V_1_data_out;

assign M_AXIS_TKEEP = M_AXIS_V_keep_V_1_data_out;

assign M_AXIS_TLAST = M_AXIS_V_last_V_1_data_out;

assign M_AXIS_TSTRB = M_AXIS_V_strb_V_1_data_out;

assign M_AXIS_TUSER = M_AXIS_V_user_V_1_data_out;

assign M_AXIS_TVALID = M_AXIS_V_dest_V_1_state[1'd0];

assign M_AXIS_V_data_V_1_ack_in = M_AXIS_V_data_V_1_state[1'd1];

assign M_AXIS_V_data_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_data_V_1_load_A = (~M_AXIS_V_data_V_1_sel_wr & M_AXIS_V_data_V_1_state_cmp_full);

assign M_AXIS_V_data_V_1_load_B = (M_AXIS_V_data_V_1_state_cmp_full & M_AXIS_V_data_V_1_sel_wr);

assign M_AXIS_V_data_V_1_sel = M_AXIS_V_data_V_1_sel_rd;

assign M_AXIS_V_data_V_1_state_cmp_full = ((M_AXIS_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_data_V_1_vld_out = M_AXIS_V_data_V_1_state[1'd0];

assign M_AXIS_V_dest_V_1_ack_in = M_AXIS_V_dest_V_1_state[1'd1];

assign M_AXIS_V_dest_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_dest_V_1_data_out = 1'd0;

assign M_AXIS_V_dest_V_1_sel = M_AXIS_V_dest_V_1_sel_rd;

assign M_AXIS_V_dest_V_1_vld_out = M_AXIS_V_dest_V_1_state[1'd0];

assign M_AXIS_V_id_V_1_ack_in = M_AXIS_V_id_V_1_state[1'd1];

assign M_AXIS_V_id_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_id_V_1_data_out = 1'd0;

assign M_AXIS_V_id_V_1_sel = M_AXIS_V_id_V_1_sel_rd;

assign M_AXIS_V_id_V_1_vld_out = M_AXIS_V_id_V_1_state[1'd0];

assign M_AXIS_V_keep_V_1_ack_in = M_AXIS_V_keep_V_1_state[1'd1];

assign M_AXIS_V_keep_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_keep_V_1_data_out = 4'd0;

assign M_AXIS_V_keep_V_1_sel = M_AXIS_V_keep_V_1_sel_rd;

assign M_AXIS_V_keep_V_1_vld_out = M_AXIS_V_keep_V_1_state[1'd0];

assign M_AXIS_V_last_V_1_ack_in = M_AXIS_V_last_V_1_state[1'd1];

assign M_AXIS_V_last_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_last_V_1_data_out = 1'd0;

assign M_AXIS_V_last_V_1_sel = M_AXIS_V_last_V_1_sel_rd;

assign M_AXIS_V_last_V_1_vld_out = M_AXIS_V_last_V_1_state[1'd0];

assign M_AXIS_V_strb_V_1_ack_in = M_AXIS_V_strb_V_1_state[1'd1];

assign M_AXIS_V_strb_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_strb_V_1_data_out = 4'd0;

assign M_AXIS_V_strb_V_1_sel = M_AXIS_V_strb_V_1_sel_rd;

assign M_AXIS_V_strb_V_1_vld_out = M_AXIS_V_strb_V_1_state[1'd0];

assign M_AXIS_V_user_V_1_ack_in = M_AXIS_V_user_V_1_state[1'd1];

assign M_AXIS_V_user_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_user_V_1_data_out = 1'd0;

assign M_AXIS_V_user_V_1_sel = M_AXIS_V_user_V_1_sel_rd;

assign M_AXIS_V_user_V_1_vld_out = M_AXIS_V_user_V_1_state[1'd0];

assign S_AXIS_TREADY = S_AXIS_V_dest_V_0_state[1'd1];

assign S_AXIS_V_data_V_0_ack_in = S_AXIS_V_data_V_0_state[1'd1];

assign S_AXIS_V_data_V_0_load_A = (~S_AXIS_V_data_V_0_sel_wr & S_AXIS_V_data_V_0_state_cmp_full);

assign S_AXIS_V_data_V_0_load_B = (S_AXIS_V_data_V_0_state_cmp_full & S_AXIS_V_data_V_0_sel_wr);

assign S_AXIS_V_data_V_0_sel = S_AXIS_V_data_V_0_sel_rd;

assign S_AXIS_V_data_V_0_state_cmp_full = ((S_AXIS_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign S_AXIS_V_data_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_data_V_0_vld_out = S_AXIS_V_data_V_0_state[1'd0];

assign S_AXIS_V_dest_V_0_vld_in = S_AXIS_TVALID;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state19 = ((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_373_p2 = ((i_reg_268 == 16'd64000) ? 1'b1 : 1'b0);

assign exitcond_fu_463_p2 = ((i_1_reg_324 == 16'd64000) ? 1'b1 : 1'b0);

assign grp_count_occ_v2_fu_335_ap_start = grp_count_occ_v2_fu_335_ap_start_reg;

assign grp_sort_occ_v2_fu_344_ap_start = grp_sort_occ_v2_fu_344_ap_start_reg;

assign i_4_fu_379_p2 = (i_reg_268 + 16'd1);

assign i_5_fu_469_p2 = (i_1_reg_324 + 16'd1);

assign indvarinc3_i_fu_412_p2 = (invdar2_i_reg_291 + 8'd1);

assign indvarinc6_i_fu_429_p2 = (invdar5_i_reg_302 + 8'd1);

assign indvarinc9_i_fu_446_p2 = (invdar8_i_reg_313 + 8'd1);

assign indvarinc_fu_356_p2 = (invdar_reg_257 + 16'd1);

assign indvarinc_i_fu_395_p2 = (invdar_i_reg_280 + 8'd1);

assign tmp_16_fu_390_p1 = i_reg_268;

assign tmp_17_fu_475_p1 = i_1_reg_324;

assign tmp_1_i_fu_418_p1 = invdar2_i_reg_291;

assign tmp_2_i_fu_423_p2 = ((invdar2_i_reg_291 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_3_i_fu_435_p1 = invdar5_i_reg_302;

assign tmp_4_i_fu_440_p2 = ((invdar5_i_reg_302 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_5_i_fu_452_p1 = invdar8_i_reg_313;

assign tmp_6_i_fu_457_p2 = ((invdar8_i_reg_313 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_fu_362_p1 = invdar_reg_257;

assign tmp_i_16_fu_406_p2 = ((invdar_i_reg_280 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_i_fu_401_p1 = invdar_i_reg_280;

assign tmp_s_fu_367_p2 = ((invdar_reg_257 == 16'd63999) ? 1'b1 : 1'b0);

endmodule //HLS_radix
