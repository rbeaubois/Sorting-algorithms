// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sort_occ_v2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_src_address0,
        array_src_ce0,
        array_src_q0,
        array_dst_address0,
        array_dst_ce0,
        array_dst_we0,
        array_dst_d0,
        shift,
        count_address0,
        count_ce0,
        count_we0,
        count_d0,
        count_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] array_src_address0;
output   array_src_ce0;
input  [31:0] array_src_q0;
output  [15:0] array_dst_address0;
output   array_dst_ce0;
output   array_dst_we0;
output  [31:0] array_dst_d0;
input  [5:0] shift;
output  [7:0] count_address0;
output   count_ce0;
output   count_we0;
output  [31:0] count_d0;
input  [31:0] count_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_src_ce0;
reg array_dst_ce0;
reg array_dst_we0;
reg[7:0] count_address0;
reg count_ce0;
reg count_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] shift_cast_fu_82_p1;
reg   [31:0] shift_cast_reg_141;
wire   [15:0] i_cast_fu_100_p2;
reg   [15:0] i_cast_reg_146;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_106_p2;
reg   [31:0] array_src_load_reg_159;
wire    ap_CS_fsm_state3;
wire   [7:0] tmp_3_fu_122_p1;
reg   [7:0] tmp_3_reg_164;
reg   [7:0] count_addr_reg_169;
wire    ap_CS_fsm_state4;
reg   [31:0] count_load_reg_174;
wire    ap_CS_fsm_state5;
reg   [15:0] i_0_in_reg_71;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_1_fu_112_p1;
wire   [63:0] tmp_4_fu_126_p1;
wire  signed [63:0] tmp_6_fu_136_p1;
wire  signed [31:0] tmp_5_fu_130_p2;
wire   [16:0] i_0_in_cast_fu_86_p1;
wire   [16:0] i_fu_90_p2;
wire  signed [31:0] i_cast1_fu_96_p1;
wire   [31:0] tmp_2_fu_117_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_in_reg_71 <= i_cast_reg_146;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_in_reg_71 <= 16'd64000;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        array_src_load_reg_159 <= array_src_q0;
        tmp_3_reg_164 <= tmp_3_fu_122_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        count_addr_reg_169 <= tmp_4_fu_126_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        count_load_reg_174 <= count_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_cast_reg_146 <= i_cast_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        shift_cast_reg_141[5 : 0] <= shift_cast_fu_82_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        array_dst_ce0 = 1'b1;
    end else begin
        array_dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        array_dst_we0 = 1'b1;
    end else begin
        array_dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_src_ce0 = 1'b1;
    end else begin
        array_src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_address0 = count_addr_reg_169;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        count_address0 = tmp_4_fu_126_p1;
    end else begin
        count_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        count_ce0 = 1'b1;
    end else begin
        count_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        count_we0 = 1'b1;
    end else begin
        count_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign array_dst_address0 = tmp_6_fu_136_p1;

assign array_dst_d0 = array_src_load_reg_159;

assign array_src_address0 = tmp_1_fu_112_p1;

assign count_d0 = tmp_5_fu_130_p2;

assign i_0_in_cast_fu_86_p1 = i_0_in_reg_71;

assign i_cast1_fu_96_p1 = $signed(i_fu_90_p2);

assign i_cast_fu_100_p2 = ($signed(i_0_in_reg_71) + $signed(16'd65535));

assign i_fu_90_p2 = ($signed(i_0_in_cast_fu_86_p1) + $signed(17'd131071));

assign shift_cast_fu_82_p1 = shift;

assign tmp_1_fu_112_p1 = $unsigned(i_cast1_fu_96_p1);

assign tmp_2_fu_117_p2 = array_src_q0 >> shift_cast_reg_141;

assign tmp_3_fu_122_p1 = tmp_2_fu_117_p2[7:0];

assign tmp_4_fu_126_p1 = tmp_3_reg_164;

assign tmp_5_fu_130_p2 = ($signed(32'd4294967295) + $signed(count_load_reg_174));

assign tmp_6_fu_136_p1 = tmp_5_fu_130_p2;

assign tmp_fu_106_p2 = ((i_0_in_reg_71 == 16'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    shift_cast_reg_141[31:6] <= 26'b00000000000000000000000000;
end

endmodule //sort_occ_v2
