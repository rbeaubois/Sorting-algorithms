-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity count_occ_v2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_src_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    array_src_ce0 : OUT STD_LOGIC;
    array_src_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c1_ce0 : OUT STD_LOGIC;
    c1_we0 : OUT STD_LOGIC;
    c1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c1_ce1 : OUT STD_LOGIC;
    c1_we1 : OUT STD_LOGIC;
    c1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c2_ce0 : OUT STD_LOGIC;
    c2_we0 : OUT STD_LOGIC;
    c2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c2_ce1 : OUT STD_LOGIC;
    c2_we1 : OUT STD_LOGIC;
    c2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c3_ce0 : OUT STD_LOGIC;
    c3_we0 : OUT STD_LOGIC;
    c3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c3_ce1 : OUT STD_LOGIC;
    c3_we1 : OUT STD_LOGIC;
    c3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    c4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c4_ce0 : OUT STD_LOGIC;
    c4_we0 : OUT STD_LOGIC;
    c4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c4_ce1 : OUT STD_LOGIC;
    c4_we1 : OUT STD_LOGIC;
    c4_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c4_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of count_occ_v2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_FA00 : STD_LOGIC_VECTOR (15 downto 0) := "1111101000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_219_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_reg_369 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c1_addr_reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c2_addr_reg_384 : STD_LOGIC_VECTOR (7 downto 0);
    signal c3_addr_reg_389 : STD_LOGIC_VECTOR (7 downto 0);
    signal c4_addr_reg_394 : STD_LOGIC_VECTOR (7 downto 0);
    signal c1_load_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c2_load_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_load_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal c4_load_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c1_addr_2_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_addr_2_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal c3_addr_2_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal c4_addr_2_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_fu_336_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_462 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_13_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_191 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_reg_202 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_230_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_fu_239_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_254_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_269_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_202 <= ap_const_lv9_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_202 <= i_3_reg_462;
            end if; 
        end if;
    end process;

    i_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_191 <= i_2_reg_369;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_191 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                c1_addr_2_reg_427 <= tmp_11_fu_328_p1(8 - 1 downto 0);
                c2_addr_2_reg_437 <= tmp_11_fu_328_p1(8 - 1 downto 0);
                c3_addr_2_reg_447 <= tmp_11_fu_328_p1(8 - 1 downto 0);
                c4_addr_2_reg_457 <= tmp_11_fu_328_p1(8 - 1 downto 0);
                i_3_reg_462 <= i_3_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c1_addr_reg_379 <= tmp_7_fu_234_p1(8 - 1 downto 0);
                c2_addr_reg_384 <= tmp_3_fu_249_p1(8 - 1 downto 0);
                c3_addr_reg_389 <= tmp_s_fu_264_p1(8 - 1 downto 0);
                c4_addr_reg_394 <= tmp_5_fu_279_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c1_load_reg_399 <= c1_q0;
                c2_load_reg_404 <= c2_q0;
                c3_load_reg_409 <= c3_q0;
                c4_load_reg_414 <= c4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_369 <= i_2_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_12_reg_467 <= tmp_12_fu_342_p2;
                tmp_13_reg_472 <= tmp_13_fu_348_p2;
                tmp_14_reg_477 <= tmp_14_fu_354_p2;
                tmp_15_reg_482 <= tmp_15_fu_360_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_213_p2, ap_CS_fsm_state6, exitcond_fu_308_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond_fu_308_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_308_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond_fu_308_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_308_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_src_address0 <= tmp_fu_225_p1(16 - 1 downto 0);

    array_src_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_src_ce0 <= ap_const_logic_1;
        else 
            array_src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_address0_assign_proc : process(c1_addr_reg_379, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_7_fu_234_p1, tmp_10_fu_320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c1_address0 <= tmp_10_fu_320_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c1_address0 <= c1_addr_reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c1_address0 <= tmp_7_fu_234_p1(8 - 1 downto 0);
        else 
            c1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c1_address1_assign_proc : process(ap_CS_fsm_state6, c1_addr_2_reg_427, ap_CS_fsm_state8, tmp_11_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c1_address1 <= c1_addr_2_reg_427;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c1_address1 <= tmp_11_fu_328_p1(8 - 1 downto 0);
        else 
            c1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    c1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            c1_ce0 <= ap_const_logic_1;
        else 
            c1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            c1_ce1 <= ap_const_logic_1;
        else 
            c1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c1_d0 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(c1_load_reg_399));
    c1_d1 <= tmp_12_reg_467;

    c1_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c1_we0 <= ap_const_logic_1;
        else 
            c1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c1_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c1_we1 <= ap_const_logic_1;
        else 
            c1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    c2_address0_assign_proc : process(ap_CS_fsm_state3, c2_addr_reg_384, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_3_fu_249_p1, tmp_10_fu_320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c2_address0 <= tmp_10_fu_320_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c2_address0 <= c2_addr_reg_384;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c2_address0 <= tmp_3_fu_249_p1(8 - 1 downto 0);
        else 
            c2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c2_address1_assign_proc : process(ap_CS_fsm_state6, c2_addr_2_reg_437, ap_CS_fsm_state8, tmp_11_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c2_address1 <= c2_addr_2_reg_437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c2_address1 <= tmp_11_fu_328_p1(8 - 1 downto 0);
        else 
            c2_address1 <= "XXXXXXXX";
        end if; 
    end process;


    c2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            c2_ce0 <= ap_const_logic_1;
        else 
            c2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            c2_ce1 <= ap_const_logic_1;
        else 
            c2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c2_d0 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(c2_load_reg_404));
    c2_d1 <= tmp_13_reg_472;

    c2_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c2_we0 <= ap_const_logic_1;
        else 
            c2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c2_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c2_we1 <= ap_const_logic_1;
        else 
            c2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    c3_address0_assign_proc : process(ap_CS_fsm_state3, c3_addr_reg_389, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_s_fu_264_p1, tmp_10_fu_320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c3_address0 <= tmp_10_fu_320_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c3_address0 <= c3_addr_reg_389;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c3_address0 <= tmp_s_fu_264_p1(8 - 1 downto 0);
        else 
            c3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c3_address1_assign_proc : process(ap_CS_fsm_state6, c3_addr_2_reg_447, ap_CS_fsm_state8, tmp_11_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c3_address1 <= c3_addr_2_reg_447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c3_address1 <= tmp_11_fu_328_p1(8 - 1 downto 0);
        else 
            c3_address1 <= "XXXXXXXX";
        end if; 
    end process;


    c3_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            c3_ce0 <= ap_const_logic_1;
        else 
            c3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            c3_ce1 <= ap_const_logic_1;
        else 
            c3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c3_d0 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(c3_load_reg_409));
    c3_d1 <= tmp_14_reg_477;

    c3_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c3_we0 <= ap_const_logic_1;
        else 
            c3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c3_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c3_we1 <= ap_const_logic_1;
        else 
            c3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    c4_address0_assign_proc : process(ap_CS_fsm_state3, c4_addr_reg_394, ap_CS_fsm_state6, ap_CS_fsm_state5, tmp_5_fu_279_p1, tmp_10_fu_320_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c4_address0 <= tmp_10_fu_320_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c4_address0 <= c4_addr_reg_394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c4_address0 <= tmp_5_fu_279_p1(8 - 1 downto 0);
        else 
            c4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c4_address1_assign_proc : process(ap_CS_fsm_state6, c4_addr_2_reg_457, ap_CS_fsm_state8, tmp_11_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c4_address1 <= c4_addr_2_reg_457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c4_address1 <= tmp_11_fu_328_p1(8 - 1 downto 0);
        else 
            c4_address1 <= "XXXXXXXX";
        end if; 
    end process;


    c4_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            c4_ce0 <= ap_const_logic_1;
        else 
            c4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c4_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            c4_ce1 <= ap_const_logic_1;
        else 
            c4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c4_d0 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(c4_load_reg_414));
    c4_d1 <= tmp_15_reg_482;

    c4_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c4_we0 <= ap_const_logic_1;
        else 
            c4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c4_we1_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            c4_we1 <= ap_const_logic_1;
        else 
            c4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_213_p2 <= "1" when (i_reg_191 = ap_const_lv16_FA00) else "0";
    exitcond_fu_308_p2 <= "1" when (i_1_reg_202 = ap_const_lv9_100) else "0";
    i_2_fu_219_p2 <= std_logic_vector(unsigned(i_reg_191) + unsigned(ap_const_lv16_1));
    i_3_fu_336_p2 <= std_logic_vector(unsigned(i_1_reg_202) + unsigned(ap_const_lv9_1));
    tmp_10_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_314_p2),64));
    tmp_11_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_202),64));
    tmp_12_fu_342_p2 <= std_logic_vector(unsigned(c1_q0) + unsigned(c1_q1));
    tmp_13_fu_348_p2 <= std_logic_vector(unsigned(c2_q0) + unsigned(c2_q1));
    tmp_14_fu_354_p2 <= std_logic_vector(unsigned(c3_q0) + unsigned(c3_q1));
    tmp_15_fu_360_p2 <= std_logic_vector(unsigned(c4_q0) + unsigned(c4_q1));
    tmp_17_fu_230_p1 <= array_src_q0(8 - 1 downto 0);
    tmp_1_fu_314_p2 <= std_logic_vector(unsigned(i_1_reg_202) + unsigned(ap_const_lv9_1FF));
    tmp_3_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_cast_fu_239_p4),64));
    tmp_5_cast_fu_254_p4 <= array_src_q0(23 downto 16);
    tmp_5_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_269_p4),64));
    tmp_6_fu_269_p4 <= array_src_q0(31 downto 24);
    tmp_7_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_230_p1),64));
    tmp_9_cast_fu_239_p4 <= array_src_q0(15 downto 8);
    tmp_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_191),64));
    tmp_s_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_cast_fu_254_p4),64));
end behav;
