-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_sort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    S_AXIS_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    S_AXIS_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    S_AXIS_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    S_AXIS_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    S_AXIS_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    M_AXIS_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    M_AXIS_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    M_AXIS_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    M_AXIS_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    M_AXIS_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of HLS_sort is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_sort,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.161500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=22754,HLS_SYN_LUT=43193,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_FFFF : STD_LOGIC_VECTOR (16 downto 0) := "01111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal S_AXIS_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_V_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_data_V_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_data_V_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_data_V_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_data_V_0_sel : STD_LOGIC;
    signal S_AXIS_V_data_V_0_load_A : STD_LOGIC;
    signal S_AXIS_V_data_V_0_load_B : STD_LOGIC;
    signal S_AXIS_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal S_AXIS_V_keep_V_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal S_AXIS_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal S_AXIS_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_keep_V_0_sel : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_load_A : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_load_B : STD_LOGIC;
    signal S_AXIS_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal S_AXIS_V_strb_V_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal S_AXIS_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal S_AXIS_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_strb_V_0_sel : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_load_A : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_load_B : STD_LOGIC;
    signal S_AXIS_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_user_V_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_user_V_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_user_V_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_user_V_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_user_V_0_sel : STD_LOGIC;
    signal S_AXIS_V_user_V_0_load_A : STD_LOGIC;
    signal S_AXIS_V_user_V_0_load_B : STD_LOGIC;
    signal S_AXIS_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_id_V_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_id_V_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_id_V_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_id_V_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_id_V_0_sel : STD_LOGIC;
    signal S_AXIS_V_id_V_0_load_A : STD_LOGIC;
    signal S_AXIS_V_id_V_0_load_B : STD_LOGIC;
    signal S_AXIS_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_dest_V_0_vld_in : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_vld_out : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_ack_in : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_ack_out : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal S_AXIS_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal S_AXIS_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal S_AXIS_V_dest_V_0_sel : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_load_A : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_load_B : STD_LOGIC;
    signal S_AXIS_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal S_AXIS_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_V_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_data_V_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_data_V_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_data_V_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_data_V_1_sel : STD_LOGIC;
    signal M_AXIS_V_data_V_1_load_A : STD_LOGIC;
    signal M_AXIS_V_data_V_1_load_B : STD_LOGIC;
    signal M_AXIS_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal M_AXIS_V_keep_V_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal M_AXIS_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal M_AXIS_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_keep_V_1_sel : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_load_A : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_load_B : STD_LOGIC;
    signal M_AXIS_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal M_AXIS_V_strb_V_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal M_AXIS_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal M_AXIS_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_strb_V_1_sel : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_load_A : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_load_B : STD_LOGIC;
    signal M_AXIS_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_user_V_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_user_V_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_user_V_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_user_V_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_user_V_1_sel : STD_LOGIC;
    signal M_AXIS_V_user_V_1_load_A : STD_LOGIC;
    signal M_AXIS_V_user_V_1_load_B : STD_LOGIC;
    signal M_AXIS_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_last_V_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_last_V_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_last_V_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_last_V_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_last_V_1_sel : STD_LOGIC;
    signal M_AXIS_V_last_V_1_load_A : STD_LOGIC;
    signal M_AXIS_V_last_V_1_load_B : STD_LOGIC;
    signal M_AXIS_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_id_V_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_id_V_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_id_V_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_id_V_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_id_V_1_sel : STD_LOGIC;
    signal M_AXIS_V_id_V_1_load_A : STD_LOGIC;
    signal M_AXIS_V_id_V_1_load_B : STD_LOGIC;
    signal M_AXIS_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_dest_V_1_vld_in : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_vld_out : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_ack_in : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_ack_out : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal M_AXIS_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal M_AXIS_V_dest_V_1_sel : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_load_A : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_load_B : STD_LOGIC;
    signal M_AXIS_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal M_AXIS_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal indvarinc_fu_276_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_299_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_2_reg_375 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_fu_341_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_3_reg_408 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal exitcond_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal tab_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tab_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tab_ce0 : STD_LOGIC;
    signal tab_we0 : STD_LOGIC;
    signal tab_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tab_ce1 : STD_LOGIC;
    signal tab_we1 : STD_LOGIC;
    signal tab_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitonic_sort_fu_271_ap_start : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_ap_done : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_ap_idle : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_ap_ready : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_data_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_bitonic_sort_fu_271_data_ce0 : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_data_we0 : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitonic_sort_fu_271_data_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_bitonic_sort_fu_271_data_ce1 : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_data_we1 : STD_LOGIC;
    signal grp_bitonic_sort_fu_271_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_161 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_198 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_211 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_reg_224 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_237 : STD_LOGIC_VECTOR (16 downto 0);
    signal val_4_reg_249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_reg_260 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_bitonic_sort_fu_271_ap_start_reg : STD_LOGIC := '0';
    signal exitcond1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component bitonic_sort IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_we0 : OUT STD_LOGIC;
        data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_ce1 : OUT STD_LOGIC;
        data_we1 : OUT STD_LOGIC;
        data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_sort_tab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tab_U : component HLS_sort_tab
    generic map (
        DataWidth => 32,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tab_address0,
        ce0 => tab_ce0,
        we0 => tab_we0,
        d0 => tab_d0,
        q0 => tab_q0,
        address1 => grp_bitonic_sort_fu_271_data_address1,
        ce1 => tab_ce1,
        we1 => tab_we1,
        d1 => grp_bitonic_sort_fu_271_data_d1,
        q1 => tab_q1);

    grp_bitonic_sort_fu_271 : component bitonic_sort
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bitonic_sort_fu_271_ap_start,
        ap_done => grp_bitonic_sort_fu_271_ap_done,
        ap_idle => grp_bitonic_sort_fu_271_ap_idle,
        ap_ready => grp_bitonic_sort_fu_271_ap_ready,
        data_address0 => grp_bitonic_sort_fu_271_data_address0,
        data_ce0 => grp_bitonic_sort_fu_271_data_ce0,
        data_we0 => grp_bitonic_sort_fu_271_data_we0,
        data_d0 => grp_bitonic_sort_fu_271_data_d0,
        data_q0 => tab_q0,
        data_address1 => grp_bitonic_sort_fu_271_data_address1,
        data_ce1 => grp_bitonic_sort_fu_271_data_ce1,
        data_we1 => grp_bitonic_sort_fu_271_data_we1,
        data_d1 => grp_bitonic_sort_fu_271_data_d1,
        data_q1 => tab_q1);





    M_AXIS_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_data_V_1_vld_out))) then 
                                        M_AXIS_V_data_V_1_sel_rd <= not(M_AXIS_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = M_AXIS_V_data_V_1_vld_in))) then 
                                        M_AXIS_V_data_V_1_sel_wr <= not(M_AXIS_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = M_AXIS_V_data_V_1_state) and (ap_const_logic_0 = M_AXIS_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = M_AXIS_V_data_V_1_state) and (ap_const_logic_0 = M_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_V_1_ack_out)))) then 
                    M_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = M_AXIS_V_data_V_1_state) and (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = M_AXIS_V_data_V_1_state) and (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_data_V_1_vld_in)))) then 
                    M_AXIS_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = M_AXIS_V_data_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_data_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_data_V_1_vld_in))) and (ap_const_lv2_3 = M_AXIS_V_data_V_1_state)) or ((ap_const_lv2_1 = M_AXIS_V_data_V_1_state) and (ap_const_logic_1 = M_AXIS_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = M_AXIS_V_data_V_1_state) and (ap_const_logic_1 = M_AXIS_V_data_V_1_vld_in)))) then 
                    M_AXIS_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_vld_out))) then 
                                        M_AXIS_V_dest_V_1_sel_rd <= not(M_AXIS_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_dest_V_1_ack_in) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_vld_in))) then 
                                        M_AXIS_V_dest_V_1_sel_wr <= not(M_AXIS_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = M_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = M_AXIS_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = M_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = M_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_ack_out)))) then 
                    M_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = M_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = M_AXIS_V_dest_V_1_state) and (ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_vld_in)))) then 
                    M_AXIS_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = M_AXIS_V_dest_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = M_AXIS_V_dest_V_1_state)) or ((ap_const_lv2_1 = M_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = M_AXIS_V_dest_V_1_state) and (ap_const_logic_1 = M_AXIS_V_dest_V_1_vld_in)))) then 
                    M_AXIS_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_id_V_1_vld_out))) then 
                                        M_AXIS_V_id_V_1_sel_rd <= not(M_AXIS_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_id_V_1_ack_in) and (ap_const_logic_1 = M_AXIS_V_id_V_1_vld_in))) then 
                                        M_AXIS_V_id_V_1_sel_wr <= not(M_AXIS_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = M_AXIS_V_id_V_1_state) and (ap_const_logic_0 = M_AXIS_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = M_AXIS_V_id_V_1_state) and (ap_const_logic_0 = M_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_id_V_1_ack_out)))) then 
                    M_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = M_AXIS_V_id_V_1_state) and (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = M_AXIS_V_id_V_1_state) and (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_id_V_1_vld_in)))) then 
                    M_AXIS_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = M_AXIS_V_id_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_id_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_id_V_1_vld_in))) and (ap_const_lv2_3 = M_AXIS_V_id_V_1_state)) or ((ap_const_lv2_1 = M_AXIS_V_id_V_1_state) and (ap_const_logic_1 = M_AXIS_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = M_AXIS_V_id_V_1_state) and (ap_const_logic_1 = M_AXIS_V_id_V_1_vld_in)))) then 
                    M_AXIS_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_vld_out))) then 
                                        M_AXIS_V_keep_V_1_sel_rd <= not(M_AXIS_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_keep_V_1_ack_in) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_vld_in))) then 
                                        M_AXIS_V_keep_V_1_sel_wr <= not(M_AXIS_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = M_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = M_AXIS_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = M_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = M_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_ack_out)))) then 
                    M_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = M_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = M_AXIS_V_keep_V_1_state) and (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_vld_in)))) then 
                    M_AXIS_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = M_AXIS_V_keep_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = M_AXIS_V_keep_V_1_state)) or ((ap_const_lv2_1 = M_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = M_AXIS_V_keep_V_1_state) and (ap_const_logic_1 = M_AXIS_V_keep_V_1_vld_in)))) then 
                    M_AXIS_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_last_V_1_vld_out))) then 
                                        M_AXIS_V_last_V_1_sel_rd <= not(M_AXIS_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_last_V_1_ack_in) and (ap_const_logic_1 = M_AXIS_V_last_V_1_vld_in))) then 
                                        M_AXIS_V_last_V_1_sel_wr <= not(M_AXIS_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = M_AXIS_V_last_V_1_state) and (ap_const_logic_0 = M_AXIS_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = M_AXIS_V_last_V_1_state) and (ap_const_logic_0 = M_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_V_1_ack_out)))) then 
                    M_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = M_AXIS_V_last_V_1_state) and (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = M_AXIS_V_last_V_1_state) and (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_last_V_1_vld_in)))) then 
                    M_AXIS_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = M_AXIS_V_last_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_last_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_last_V_1_vld_in))) and (ap_const_lv2_3 = M_AXIS_V_last_V_1_state)) or ((ap_const_lv2_1 = M_AXIS_V_last_V_1_state) and (ap_const_logic_1 = M_AXIS_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = M_AXIS_V_last_V_1_state) and (ap_const_logic_1 = M_AXIS_V_last_V_1_vld_in)))) then 
                    M_AXIS_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_vld_out))) then 
                                        M_AXIS_V_strb_V_1_sel_rd <= not(M_AXIS_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_strb_V_1_ack_in) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_vld_in))) then 
                                        M_AXIS_V_strb_V_1_sel_wr <= not(M_AXIS_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = M_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = M_AXIS_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = M_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = M_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_ack_out)))) then 
                    M_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = M_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = M_AXIS_V_strb_V_1_state) and (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_vld_in)))) then 
                    M_AXIS_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = M_AXIS_V_strb_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = M_AXIS_V_strb_V_1_state)) or ((ap_const_lv2_1 = M_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = M_AXIS_V_strb_V_1_state) and (ap_const_logic_1 = M_AXIS_V_strb_V_1_vld_in)))) then 
                    M_AXIS_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_user_V_1_vld_out))) then 
                                        M_AXIS_V_user_V_1_sel_rd <= not(M_AXIS_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = M_AXIS_V_user_V_1_ack_in) and (ap_const_logic_1 = M_AXIS_V_user_V_1_vld_in))) then 
                                        M_AXIS_V_user_V_1_sel_wr <= not(M_AXIS_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    M_AXIS_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                M_AXIS_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = M_AXIS_V_user_V_1_state) and (ap_const_logic_0 = M_AXIS_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = M_AXIS_V_user_V_1_state) and (ap_const_logic_0 = M_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_user_V_1_ack_out)))) then 
                    M_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = M_AXIS_V_user_V_1_state) and (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = M_AXIS_V_user_V_1_state) and (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_user_V_1_vld_in)))) then 
                    M_AXIS_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = M_AXIS_V_user_V_1_vld_in) and (ap_const_logic_1 = M_AXIS_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = M_AXIS_V_user_V_1_ack_out) and (ap_const_logic_1 = M_AXIS_V_user_V_1_vld_in))) and (ap_const_lv2_3 = M_AXIS_V_user_V_1_state)) or ((ap_const_lv2_1 = M_AXIS_V_user_V_1_state) and (ap_const_logic_1 = M_AXIS_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = M_AXIS_V_user_V_1_state) and (ap_const_logic_1 = M_AXIS_V_user_V_1_vld_in)))) then 
                    M_AXIS_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    M_AXIS_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out))) then 
                                        S_AXIS_V_data_V_0_sel_rd <= not(S_AXIS_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_data_V_0_ack_in) and (ap_const_logic_1 = S_AXIS_V_data_V_0_vld_in))) then 
                                        S_AXIS_V_data_V_0_sel_wr <= not(S_AXIS_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = S_AXIS_V_data_V_0_state) and (ap_const_logic_0 = S_AXIS_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = S_AXIS_V_data_V_0_state) and (ap_const_logic_0 = S_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_V_0_ack_out)))) then 
                    S_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = S_AXIS_V_data_V_0_state) and (ap_const_logic_0 = S_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = S_AXIS_V_data_V_0_state) and (ap_const_logic_0 = S_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_data_V_0_vld_in)))) then 
                    S_AXIS_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = S_AXIS_V_data_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_data_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_data_V_0_vld_in))) and (ap_const_lv2_3 = S_AXIS_V_data_V_0_state)) or ((ap_const_lv2_1 = S_AXIS_V_data_V_0_state) and (ap_const_logic_1 = S_AXIS_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = S_AXIS_V_data_V_0_state) and (ap_const_logic_1 = S_AXIS_V_data_V_0_vld_in)))) then 
                    S_AXIS_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_vld_out))) then 
                                        S_AXIS_V_dest_V_0_sel_rd <= not(S_AXIS_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_dest_V_0_ack_in) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_vld_in))) then 
                                        S_AXIS_V_dest_V_0_sel_wr <= not(S_AXIS_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = S_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = S_AXIS_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = S_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = S_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_ack_out)))) then 
                    S_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = S_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = S_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = S_AXIS_V_dest_V_0_state) and (ap_const_logic_0 = S_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_vld_in)))) then 
                    S_AXIS_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = S_AXIS_V_dest_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_dest_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = S_AXIS_V_dest_V_0_state)) or ((ap_const_lv2_1 = S_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = S_AXIS_V_dest_V_0_state) and (ap_const_logic_1 = S_AXIS_V_dest_V_0_vld_in)))) then 
                    S_AXIS_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_id_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_id_V_0_vld_out))) then 
                                        S_AXIS_V_id_V_0_sel_rd <= not(S_AXIS_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_id_V_0_ack_in) and (ap_const_logic_1 = S_AXIS_V_id_V_0_vld_in))) then 
                                        S_AXIS_V_id_V_0_sel_wr <= not(S_AXIS_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = S_AXIS_V_id_V_0_state) and (ap_const_logic_0 = S_AXIS_V_id_V_0_vld_in)) or ((ap_const_lv2_3 = S_AXIS_V_id_V_0_state) and (ap_const_logic_0 = S_AXIS_V_id_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_id_V_0_ack_out)))) then 
                    S_AXIS_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = S_AXIS_V_id_V_0_state) and (ap_const_logic_0 = S_AXIS_V_id_V_0_ack_out)) or ((ap_const_lv2_3 = S_AXIS_V_id_V_0_state) and (ap_const_logic_0 = S_AXIS_V_id_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_id_V_0_vld_in)))) then 
                    S_AXIS_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = S_AXIS_V_id_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_id_V_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_id_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_id_V_0_vld_in))) and (ap_const_lv2_3 = S_AXIS_V_id_V_0_state)) or ((ap_const_lv2_1 = S_AXIS_V_id_V_0_state) and (ap_const_logic_1 = S_AXIS_V_id_V_0_ack_out)) or ((ap_const_lv2_2 = S_AXIS_V_id_V_0_state) and (ap_const_logic_1 = S_AXIS_V_id_V_0_vld_in)))) then 
                    S_AXIS_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_keep_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_vld_out))) then 
                                        S_AXIS_V_keep_V_0_sel_rd <= not(S_AXIS_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_keep_V_0_ack_in) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_vld_in))) then 
                                        S_AXIS_V_keep_V_0_sel_wr <= not(S_AXIS_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = S_AXIS_V_keep_V_0_state) and (ap_const_logic_0 = S_AXIS_V_keep_V_0_vld_in)) or ((ap_const_lv2_3 = S_AXIS_V_keep_V_0_state) and (ap_const_logic_0 = S_AXIS_V_keep_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_ack_out)))) then 
                    S_AXIS_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = S_AXIS_V_keep_V_0_state) and (ap_const_logic_0 = S_AXIS_V_keep_V_0_ack_out)) or ((ap_const_lv2_3 = S_AXIS_V_keep_V_0_state) and (ap_const_logic_0 = S_AXIS_V_keep_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_vld_in)))) then 
                    S_AXIS_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = S_AXIS_V_keep_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_keep_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_vld_in))) and (ap_const_lv2_3 = S_AXIS_V_keep_V_0_state)) or ((ap_const_lv2_1 = S_AXIS_V_keep_V_0_state) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_ack_out)) or ((ap_const_lv2_2 = S_AXIS_V_keep_V_0_state) and (ap_const_logic_1 = S_AXIS_V_keep_V_0_vld_in)))) then 
                    S_AXIS_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_strb_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_vld_out))) then 
                                        S_AXIS_V_strb_V_0_sel_rd <= not(S_AXIS_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_strb_V_0_ack_in) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_vld_in))) then 
                                        S_AXIS_V_strb_V_0_sel_wr <= not(S_AXIS_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = S_AXIS_V_strb_V_0_state) and (ap_const_logic_0 = S_AXIS_V_strb_V_0_vld_in)) or ((ap_const_lv2_3 = S_AXIS_V_strb_V_0_state) and (ap_const_logic_0 = S_AXIS_V_strb_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_ack_out)))) then 
                    S_AXIS_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = S_AXIS_V_strb_V_0_state) and (ap_const_logic_0 = S_AXIS_V_strb_V_0_ack_out)) or ((ap_const_lv2_3 = S_AXIS_V_strb_V_0_state) and (ap_const_logic_0 = S_AXIS_V_strb_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_vld_in)))) then 
                    S_AXIS_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = S_AXIS_V_strb_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_strb_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_vld_in))) and (ap_const_lv2_3 = S_AXIS_V_strb_V_0_state)) or ((ap_const_lv2_1 = S_AXIS_V_strb_V_0_state) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_ack_out)) or ((ap_const_lv2_2 = S_AXIS_V_strb_V_0_state) and (ap_const_logic_1 = S_AXIS_V_strb_V_0_vld_in)))) then 
                    S_AXIS_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_user_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_user_V_0_vld_out))) then 
                                        S_AXIS_V_user_V_0_sel_rd <= not(S_AXIS_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = S_AXIS_V_user_V_0_ack_in) and (ap_const_logic_1 = S_AXIS_V_user_V_0_vld_in))) then 
                                        S_AXIS_V_user_V_0_sel_wr <= not(S_AXIS_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    S_AXIS_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                S_AXIS_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = S_AXIS_V_user_V_0_state) and (ap_const_logic_0 = S_AXIS_V_user_V_0_vld_in)) or ((ap_const_lv2_3 = S_AXIS_V_user_V_0_state) and (ap_const_logic_0 = S_AXIS_V_user_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_user_V_0_ack_out)))) then 
                    S_AXIS_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = S_AXIS_V_user_V_0_state) and (ap_const_logic_0 = S_AXIS_V_user_V_0_ack_out)) or ((ap_const_lv2_3 = S_AXIS_V_user_V_0_state) and (ap_const_logic_0 = S_AXIS_V_user_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_user_V_0_vld_in)))) then 
                    S_AXIS_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = S_AXIS_V_user_V_0_vld_in) and (ap_const_logic_1 = S_AXIS_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = S_AXIS_V_user_V_0_ack_out) and (ap_const_logic_1 = S_AXIS_V_user_V_0_vld_in))) and (ap_const_lv2_3 = S_AXIS_V_user_V_0_state)) or ((ap_const_lv2_1 = S_AXIS_V_user_V_0_state) and (ap_const_logic_1 = S_AXIS_V_user_V_0_ack_out)) or ((ap_const_lv2_2 = S_AXIS_V_user_V_0_state) and (ap_const_logic_1 = S_AXIS_V_user_V_0_vld_in)))) then 
                    S_AXIS_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    S_AXIS_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bitonic_sort_fu_271_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bitonic_sort_fu_271_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond1_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_bitonic_sort_fu_271_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bitonic_sort_fu_271_ap_ready = ap_const_logic_1)) then 
                    grp_bitonic_sort_fu_271_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_1_reg_260 <= i_3_reg_408;
            elsif (((grp_bitonic_sort_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_260 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    i_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_237 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_237 <= i_2_reg_375;
            end if; 
        end if;
    end process;

    invdar_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_161 <= indvarinc_fu_276_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                invdar_reg_161 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    val_4_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                val_4_reg_249 <= tmp_last_V_reg_418;
            elsif (((grp_bitonic_sort_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                val_4_reg_249 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_V_1_load_A)) then
                M_AXIS_V_data_V_1_payload_A <= tab_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_data_V_1_load_B)) then
                M_AXIS_V_data_V_1_payload_B <= tab_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_dest_V_1_load_A)) then
                M_AXIS_V_dest_V_1_payload_A <= tmp_dest_V_reg_172;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_dest_V_1_load_B)) then
                M_AXIS_V_dest_V_1_payload_B <= tmp_dest_V_reg_172;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_id_V_1_load_A)) then
                M_AXIS_V_id_V_1_payload_A <= tmp_id_V_reg_185;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_id_V_1_load_B)) then
                M_AXIS_V_id_V_1_payload_B <= tmp_id_V_reg_185;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_keep_V_1_load_A)) then
                M_AXIS_V_keep_V_1_payload_A <= tmp_keep_V_reg_224;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_keep_V_1_load_B)) then
                M_AXIS_V_keep_V_1_payload_B <= tmp_keep_V_reg_224;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_last_V_1_load_A)) then
                M_AXIS_V_last_V_1_payload_A <= tmp_last_V_reg_418;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_last_V_1_load_B)) then
                M_AXIS_V_last_V_1_payload_B <= tmp_last_V_reg_418;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_strb_V_1_load_A)) then
                M_AXIS_V_strb_V_1_payload_A <= tmp_strb_V_reg_211;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_strb_V_1_load_B)) then
                M_AXIS_V_strb_V_1_payload_B <= tmp_strb_V_reg_211;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_user_V_1_load_A)) then
                M_AXIS_V_user_V_1_payload_A <= tmp_user_V_reg_198;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = M_AXIS_V_user_V_1_load_B)) then
                M_AXIS_V_user_V_1_payload_B <= tmp_user_V_reg_198;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_V_0_load_A)) then
                S_AXIS_V_data_V_0_payload_A <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_data_V_0_load_B)) then
                S_AXIS_V_data_V_0_payload_B <= S_AXIS_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_dest_V_0_load_A)) then
                S_AXIS_V_dest_V_0_payload_A <= S_AXIS_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_dest_V_0_load_B)) then
                S_AXIS_V_dest_V_0_payload_B <= S_AXIS_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_id_V_0_load_A)) then
                S_AXIS_V_id_V_0_payload_A <= S_AXIS_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_id_V_0_load_B)) then
                S_AXIS_V_id_V_0_payload_B <= S_AXIS_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_keep_V_0_load_A)) then
                S_AXIS_V_keep_V_0_payload_A <= S_AXIS_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_keep_V_0_load_B)) then
                S_AXIS_V_keep_V_0_payload_B <= S_AXIS_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_strb_V_0_load_A)) then
                S_AXIS_V_strb_V_0_payload_A <= S_AXIS_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_strb_V_0_load_B)) then
                S_AXIS_V_strb_V_0_payload_B <= S_AXIS_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_user_V_0_load_A)) then
                S_AXIS_V_user_V_0_payload_A <= S_AXIS_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = S_AXIS_V_user_V_0_load_B)) then
                S_AXIS_V_user_V_0_payload_B <= S_AXIS_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_2_reg_375 <= i_2_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                i_3_reg_408 <= i_3_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_dest_V_reg_172 <= S_AXIS_V_dest_V_0_data_out;
                tmp_id_V_reg_185 <= S_AXIS_V_id_V_0_data_out;
                tmp_keep_V_reg_224 <= S_AXIS_V_keep_V_0_data_out;
                tmp_strb_V_reg_211 <= S_AXIS_V_strb_V_0_data_out;
                tmp_user_V_reg_198 <= S_AXIS_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_in))) and (exitcond_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_last_V_reg_418 <= tmp_last_V_fu_358_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (S_AXIS_V_data_V_0_vld_out, M_AXIS_V_data_V_1_ack_in, M_AXIS_V_keep_V_1_ack_in, M_AXIS_V_strb_V_1_ack_in, M_AXIS_V_user_V_1_ack_in, M_AXIS_V_last_V_1_ack_in, M_AXIS_V_id_V_1_ack_in, M_AXIS_V_dest_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond_fu_335_p2, grp_bitonic_sort_fu_271_ap_done, tmp_s_fu_287_p2, ap_CS_fsm_state5, exitcond1_fu_293_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_bitonic_sort_fu_271_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_in))) and (exitcond_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_in))) and (exitcond_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    M_AXIS_TDATA <= M_AXIS_V_data_V_1_data_out;

    M_AXIS_TDATA_blk_n_assign_proc : process(M_AXIS_V_data_V_1_state, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_V_data_V_1_state(1);
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TDEST <= M_AXIS_V_dest_V_1_data_out;
    M_AXIS_TID <= M_AXIS_V_id_V_1_data_out;
    M_AXIS_TKEEP <= M_AXIS_V_keep_V_1_data_out;
    M_AXIS_TLAST <= M_AXIS_V_last_V_1_data_out;
    M_AXIS_TSTRB <= M_AXIS_V_strb_V_1_data_out;
    M_AXIS_TUSER <= M_AXIS_V_user_V_1_data_out;
    M_AXIS_TVALID <= M_AXIS_V_dest_V_1_state(0);
    M_AXIS_V_data_V_1_ack_in <= M_AXIS_V_data_V_1_state(1);
    M_AXIS_V_data_V_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_data_V_1_data_out_assign_proc : process(M_AXIS_V_data_V_1_payload_A, M_AXIS_V_data_V_1_payload_B, M_AXIS_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_data_V_1_sel)) then 
            M_AXIS_V_data_V_1_data_out <= M_AXIS_V_data_V_1_payload_B;
        else 
            M_AXIS_V_data_V_1_data_out <= M_AXIS_V_data_V_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_data_V_1_load_A <= (not(M_AXIS_V_data_V_1_sel_wr) and M_AXIS_V_data_V_1_state_cmp_full);
    M_AXIS_V_data_V_1_load_B <= (M_AXIS_V_data_V_1_state_cmp_full and M_AXIS_V_data_V_1_sel_wr);
    M_AXIS_V_data_V_1_sel <= M_AXIS_V_data_V_1_sel_rd;
    M_AXIS_V_data_V_1_state_cmp_full <= '0' when (M_AXIS_V_data_V_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_data_V_1_vld_in_assign_proc : process(M_AXIS_V_data_V_1_ack_in, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_data_V_1_vld_out <= M_AXIS_V_data_V_1_state(0);
    M_AXIS_V_dest_V_1_ack_in <= M_AXIS_V_dest_V_1_state(1);
    M_AXIS_V_dest_V_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_dest_V_1_data_out_assign_proc : process(M_AXIS_V_dest_V_1_payload_A, M_AXIS_V_dest_V_1_payload_B, M_AXIS_V_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_dest_V_1_sel)) then 
            M_AXIS_V_dest_V_1_data_out <= M_AXIS_V_dest_V_1_payload_B;
        else 
            M_AXIS_V_dest_V_1_data_out <= M_AXIS_V_dest_V_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_dest_V_1_load_A <= (not(M_AXIS_V_dest_V_1_sel_wr) and M_AXIS_V_dest_V_1_state_cmp_full);
    M_AXIS_V_dest_V_1_load_B <= (M_AXIS_V_dest_V_1_state_cmp_full and M_AXIS_V_dest_V_1_sel_wr);
    M_AXIS_V_dest_V_1_sel <= M_AXIS_V_dest_V_1_sel_rd;
    M_AXIS_V_dest_V_1_state_cmp_full <= '0' when (M_AXIS_V_dest_V_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_dest_V_1_vld_in_assign_proc : process(M_AXIS_V_data_V_1_ack_in, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_dest_V_1_vld_out <= M_AXIS_V_dest_V_1_state(0);
    M_AXIS_V_id_V_1_ack_in <= M_AXIS_V_id_V_1_state(1);
    M_AXIS_V_id_V_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_id_V_1_data_out_assign_proc : process(M_AXIS_V_id_V_1_payload_A, M_AXIS_V_id_V_1_payload_B, M_AXIS_V_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_id_V_1_sel)) then 
            M_AXIS_V_id_V_1_data_out <= M_AXIS_V_id_V_1_payload_B;
        else 
            M_AXIS_V_id_V_1_data_out <= M_AXIS_V_id_V_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_id_V_1_load_A <= (not(M_AXIS_V_id_V_1_sel_wr) and M_AXIS_V_id_V_1_state_cmp_full);
    M_AXIS_V_id_V_1_load_B <= (M_AXIS_V_id_V_1_state_cmp_full and M_AXIS_V_id_V_1_sel_wr);
    M_AXIS_V_id_V_1_sel <= M_AXIS_V_id_V_1_sel_rd;
    M_AXIS_V_id_V_1_state_cmp_full <= '0' when (M_AXIS_V_id_V_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_id_V_1_vld_in_assign_proc : process(M_AXIS_V_data_V_1_ack_in, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_id_V_1_vld_out <= M_AXIS_V_id_V_1_state(0);
    M_AXIS_V_keep_V_1_ack_in <= M_AXIS_V_keep_V_1_state(1);
    M_AXIS_V_keep_V_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_keep_V_1_data_out_assign_proc : process(M_AXIS_V_keep_V_1_payload_A, M_AXIS_V_keep_V_1_payload_B, M_AXIS_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_keep_V_1_sel)) then 
            M_AXIS_V_keep_V_1_data_out <= M_AXIS_V_keep_V_1_payload_B;
        else 
            M_AXIS_V_keep_V_1_data_out <= M_AXIS_V_keep_V_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_keep_V_1_load_A <= (not(M_AXIS_V_keep_V_1_sel_wr) and M_AXIS_V_keep_V_1_state_cmp_full);
    M_AXIS_V_keep_V_1_load_B <= (M_AXIS_V_keep_V_1_state_cmp_full and M_AXIS_V_keep_V_1_sel_wr);
    M_AXIS_V_keep_V_1_sel <= M_AXIS_V_keep_V_1_sel_rd;
    M_AXIS_V_keep_V_1_state_cmp_full <= '0' when (M_AXIS_V_keep_V_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_keep_V_1_vld_in_assign_proc : process(M_AXIS_V_data_V_1_ack_in, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_keep_V_1_vld_out <= M_AXIS_V_keep_V_1_state(0);
    M_AXIS_V_last_V_1_ack_in <= M_AXIS_V_last_V_1_state(1);
    M_AXIS_V_last_V_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_last_V_1_data_out_assign_proc : process(M_AXIS_V_last_V_1_payload_A, M_AXIS_V_last_V_1_payload_B, M_AXIS_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_last_V_1_sel)) then 
            M_AXIS_V_last_V_1_data_out <= M_AXIS_V_last_V_1_payload_B;
        else 
            M_AXIS_V_last_V_1_data_out <= M_AXIS_V_last_V_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_last_V_1_load_A <= (not(M_AXIS_V_last_V_1_sel_wr) and M_AXIS_V_last_V_1_state_cmp_full);
    M_AXIS_V_last_V_1_load_B <= (M_AXIS_V_last_V_1_state_cmp_full and M_AXIS_V_last_V_1_sel_wr);
    M_AXIS_V_last_V_1_sel <= M_AXIS_V_last_V_1_sel_rd;
    M_AXIS_V_last_V_1_state_cmp_full <= '0' when (M_AXIS_V_last_V_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_last_V_1_vld_in_assign_proc : process(M_AXIS_V_data_V_1_ack_in, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_last_V_1_vld_out <= M_AXIS_V_last_V_1_state(0);
    M_AXIS_V_strb_V_1_ack_in <= M_AXIS_V_strb_V_1_state(1);
    M_AXIS_V_strb_V_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_strb_V_1_data_out_assign_proc : process(M_AXIS_V_strb_V_1_payload_A, M_AXIS_V_strb_V_1_payload_B, M_AXIS_V_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_strb_V_1_sel)) then 
            M_AXIS_V_strb_V_1_data_out <= M_AXIS_V_strb_V_1_payload_B;
        else 
            M_AXIS_V_strb_V_1_data_out <= M_AXIS_V_strb_V_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_strb_V_1_load_A <= (not(M_AXIS_V_strb_V_1_sel_wr) and M_AXIS_V_strb_V_1_state_cmp_full);
    M_AXIS_V_strb_V_1_load_B <= (M_AXIS_V_strb_V_1_state_cmp_full and M_AXIS_V_strb_V_1_sel_wr);
    M_AXIS_V_strb_V_1_sel <= M_AXIS_V_strb_V_1_sel_rd;
    M_AXIS_V_strb_V_1_state_cmp_full <= '0' when (M_AXIS_V_strb_V_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_strb_V_1_vld_in_assign_proc : process(M_AXIS_V_data_V_1_ack_in, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_strb_V_1_vld_out <= M_AXIS_V_strb_V_1_state(0);
    M_AXIS_V_user_V_1_ack_in <= M_AXIS_V_user_V_1_state(1);
    M_AXIS_V_user_V_1_ack_out <= M_AXIS_TREADY;

    M_AXIS_V_user_V_1_data_out_assign_proc : process(M_AXIS_V_user_V_1_payload_A, M_AXIS_V_user_V_1_payload_B, M_AXIS_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = M_AXIS_V_user_V_1_sel)) then 
            M_AXIS_V_user_V_1_data_out <= M_AXIS_V_user_V_1_payload_B;
        else 
            M_AXIS_V_user_V_1_data_out <= M_AXIS_V_user_V_1_payload_A;
        end if; 
    end process;

    M_AXIS_V_user_V_1_load_A <= (not(M_AXIS_V_user_V_1_sel_wr) and M_AXIS_V_user_V_1_state_cmp_full);
    M_AXIS_V_user_V_1_load_B <= (M_AXIS_V_user_V_1_state_cmp_full and M_AXIS_V_user_V_1_sel_wr);
    M_AXIS_V_user_V_1_sel <= M_AXIS_V_user_V_1_sel_rd;
    M_AXIS_V_user_V_1_state_cmp_full <= '0' when (M_AXIS_V_user_V_1_state = ap_const_lv2_1) else '1';

    M_AXIS_V_user_V_1_vld_in_assign_proc : process(M_AXIS_V_data_V_1_ack_in, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = M_AXIS_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            M_AXIS_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            M_AXIS_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    M_AXIS_V_user_V_1_vld_out <= M_AXIS_V_user_V_1_state(0);

    S_AXIS_TDATA_blk_n_assign_proc : process(S_AXIS_V_data_V_0_state, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_V_data_V_0_state(0);
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_AXIS_TREADY <= S_AXIS_V_dest_V_0_state(1);
    S_AXIS_V_data_V_0_ack_in <= S_AXIS_V_data_V_0_state(1);

    S_AXIS_V_data_V_0_ack_out_assign_proc : process(S_AXIS_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_AXIS_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_data_V_0_data_out_assign_proc : process(S_AXIS_V_data_V_0_payload_A, S_AXIS_V_data_V_0_payload_B, S_AXIS_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_data_V_0_sel)) then 
            S_AXIS_V_data_V_0_data_out <= S_AXIS_V_data_V_0_payload_B;
        else 
            S_AXIS_V_data_V_0_data_out <= S_AXIS_V_data_V_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_data_V_0_load_A <= (not(S_AXIS_V_data_V_0_sel_wr) and S_AXIS_V_data_V_0_state_cmp_full);
    S_AXIS_V_data_V_0_load_B <= (S_AXIS_V_data_V_0_state_cmp_full and S_AXIS_V_data_V_0_sel_wr);
    S_AXIS_V_data_V_0_sel <= S_AXIS_V_data_V_0_sel_rd;
    S_AXIS_V_data_V_0_state_cmp_full <= '0' when (S_AXIS_V_data_V_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_data_V_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_data_V_0_vld_out <= S_AXIS_V_data_V_0_state(0);
    S_AXIS_V_dest_V_0_ack_in <= S_AXIS_V_dest_V_0_state(1);

    S_AXIS_V_dest_V_0_ack_out_assign_proc : process(S_AXIS_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_AXIS_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_dest_V_0_data_out_assign_proc : process(S_AXIS_V_dest_V_0_payload_A, S_AXIS_V_dest_V_0_payload_B, S_AXIS_V_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_dest_V_0_sel)) then 
            S_AXIS_V_dest_V_0_data_out <= S_AXIS_V_dest_V_0_payload_B;
        else 
            S_AXIS_V_dest_V_0_data_out <= S_AXIS_V_dest_V_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_dest_V_0_load_A <= (not(S_AXIS_V_dest_V_0_sel_wr) and S_AXIS_V_dest_V_0_state_cmp_full);
    S_AXIS_V_dest_V_0_load_B <= (S_AXIS_V_dest_V_0_state_cmp_full and S_AXIS_V_dest_V_0_sel_wr);
    S_AXIS_V_dest_V_0_sel <= S_AXIS_V_dest_V_0_sel_rd;
    S_AXIS_V_dest_V_0_state_cmp_full <= '0' when (S_AXIS_V_dest_V_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_dest_V_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_dest_V_0_vld_out <= S_AXIS_V_dest_V_0_state(0);
    S_AXIS_V_id_V_0_ack_in <= S_AXIS_V_id_V_0_state(1);

    S_AXIS_V_id_V_0_ack_out_assign_proc : process(S_AXIS_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_AXIS_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_id_V_0_data_out_assign_proc : process(S_AXIS_V_id_V_0_payload_A, S_AXIS_V_id_V_0_payload_B, S_AXIS_V_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_id_V_0_sel)) then 
            S_AXIS_V_id_V_0_data_out <= S_AXIS_V_id_V_0_payload_B;
        else 
            S_AXIS_V_id_V_0_data_out <= S_AXIS_V_id_V_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_id_V_0_load_A <= (not(S_AXIS_V_id_V_0_sel_wr) and S_AXIS_V_id_V_0_state_cmp_full);
    S_AXIS_V_id_V_0_load_B <= (S_AXIS_V_id_V_0_state_cmp_full and S_AXIS_V_id_V_0_sel_wr);
    S_AXIS_V_id_V_0_sel <= S_AXIS_V_id_V_0_sel_rd;
    S_AXIS_V_id_V_0_state_cmp_full <= '0' when (S_AXIS_V_id_V_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_id_V_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_id_V_0_vld_out <= S_AXIS_V_id_V_0_state(0);
    S_AXIS_V_keep_V_0_ack_in <= S_AXIS_V_keep_V_0_state(1);

    S_AXIS_V_keep_V_0_ack_out_assign_proc : process(S_AXIS_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_AXIS_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_keep_V_0_data_out_assign_proc : process(S_AXIS_V_keep_V_0_payload_A, S_AXIS_V_keep_V_0_payload_B, S_AXIS_V_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_keep_V_0_sel)) then 
            S_AXIS_V_keep_V_0_data_out <= S_AXIS_V_keep_V_0_payload_B;
        else 
            S_AXIS_V_keep_V_0_data_out <= S_AXIS_V_keep_V_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_keep_V_0_load_A <= (not(S_AXIS_V_keep_V_0_sel_wr) and S_AXIS_V_keep_V_0_state_cmp_full);
    S_AXIS_V_keep_V_0_load_B <= (S_AXIS_V_keep_V_0_state_cmp_full and S_AXIS_V_keep_V_0_sel_wr);
    S_AXIS_V_keep_V_0_sel <= S_AXIS_V_keep_V_0_sel_rd;
    S_AXIS_V_keep_V_0_state_cmp_full <= '0' when (S_AXIS_V_keep_V_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_keep_V_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_keep_V_0_vld_out <= S_AXIS_V_keep_V_0_state(0);
    S_AXIS_V_strb_V_0_ack_in <= S_AXIS_V_strb_V_0_state(1);

    S_AXIS_V_strb_V_0_ack_out_assign_proc : process(S_AXIS_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_AXIS_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_strb_V_0_data_out_assign_proc : process(S_AXIS_V_strb_V_0_payload_A, S_AXIS_V_strb_V_0_payload_B, S_AXIS_V_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_strb_V_0_sel)) then 
            S_AXIS_V_strb_V_0_data_out <= S_AXIS_V_strb_V_0_payload_B;
        else 
            S_AXIS_V_strb_V_0_data_out <= S_AXIS_V_strb_V_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_strb_V_0_load_A <= (not(S_AXIS_V_strb_V_0_sel_wr) and S_AXIS_V_strb_V_0_state_cmp_full);
    S_AXIS_V_strb_V_0_load_B <= (S_AXIS_V_strb_V_0_state_cmp_full and S_AXIS_V_strb_V_0_sel_wr);
    S_AXIS_V_strb_V_0_sel <= S_AXIS_V_strb_V_0_sel_rd;
    S_AXIS_V_strb_V_0_state_cmp_full <= '0' when (S_AXIS_V_strb_V_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_strb_V_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_strb_V_0_vld_out <= S_AXIS_V_strb_V_0_state(0);
    S_AXIS_V_user_V_0_ack_in <= S_AXIS_V_user_V_0_state(1);

    S_AXIS_V_user_V_0_ack_out_assign_proc : process(S_AXIS_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            S_AXIS_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            S_AXIS_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_V_user_V_0_data_out_assign_proc : process(S_AXIS_V_user_V_0_payload_A, S_AXIS_V_user_V_0_payload_B, S_AXIS_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = S_AXIS_V_user_V_0_sel)) then 
            S_AXIS_V_user_V_0_data_out <= S_AXIS_V_user_V_0_payload_B;
        else 
            S_AXIS_V_user_V_0_data_out <= S_AXIS_V_user_V_0_payload_A;
        end if; 
    end process;

    S_AXIS_V_user_V_0_load_A <= (not(S_AXIS_V_user_V_0_sel_wr) and S_AXIS_V_user_V_0_state_cmp_full);
    S_AXIS_V_user_V_0_load_B <= (S_AXIS_V_user_V_0_state_cmp_full and S_AXIS_V_user_V_0_sel_wr);
    S_AXIS_V_user_V_0_sel <= S_AXIS_V_user_V_0_sel_rd;
    S_AXIS_V_user_V_0_state_cmp_full <= '0' when (S_AXIS_V_user_V_0_state = ap_const_lv2_1) else '1';
    S_AXIS_V_user_V_0_vld_in <= S_AXIS_TVALID;
    S_AXIS_V_user_V_0_vld_out <= S_AXIS_V_user_V_0_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state6_assign_proc : process(M_AXIS_V_data_V_1_ack_in, M_AXIS_V_keep_V_1_ack_in, M_AXIS_V_strb_V_1_ack_in, M_AXIS_V_user_V_1_ack_in, M_AXIS_V_last_V_1_ack_in, M_AXIS_V_id_V_1_ack_in, M_AXIS_V_dest_V_1_ack_in)
    begin
                ap_block_state6 <= ((ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_in));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_293_p2 <= "1" when (i_reg_237 = ap_const_lv17_10000) else "0";
    exitcond_fu_335_p2 <= "1" when (i_1_reg_260 = ap_const_lv17_10000) else "0";
    grp_bitonic_sort_fu_271_ap_start <= grp_bitonic_sort_fu_271_ap_start_reg;
    i_2_fu_299_p2 <= std_logic_vector(unsigned(i_reg_237) + unsigned(ap_const_lv17_1));
    i_3_fu_341_p2 <= std_logic_vector(unsigned(i_1_reg_260) + unsigned(ap_const_lv17_1));
    indvarinc_fu_276_p2 <= std_logic_vector(unsigned(invdar_reg_161) + unsigned(ap_const_lv16_1));

    tab_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state6, grp_bitonic_sort_fu_271_data_address0, ap_CS_fsm_state5, tmp_fu_282_p1, tmp_1_fu_330_p1, tmp_2_fu_347_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tab_address0 <= tmp_2_fu_347_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tab_address0 <= tmp_1_fu_330_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tab_address0 <= tmp_fu_282_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tab_address0 <= grp_bitonic_sort_fu_271_data_address0;
        else 
            tab_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tab_ce0_assign_proc : process(S_AXIS_V_data_V_0_vld_out, M_AXIS_V_data_V_1_ack_in, M_AXIS_V_keep_V_1_ack_in, M_AXIS_V_strb_V_1_ack_in, M_AXIS_V_user_V_1_ack_in, M_AXIS_V_last_V_1_ack_in, M_AXIS_V_id_V_1_ack_in, M_AXIS_V_dest_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state6, grp_bitonic_sort_fu_271_data_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_const_logic_0 = M_AXIS_V_dest_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_id_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_last_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_user_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_strb_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_keep_V_1_ack_in) or (ap_const_logic_0 = M_AXIS_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            tab_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tab_ce0 <= grp_bitonic_sort_fu_271_data_ce0;
        else 
            tab_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tab_ce1_assign_proc : process(grp_bitonic_sort_fu_271_data_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tab_ce1 <= grp_bitonic_sort_fu_271_data_ce1;
        else 
            tab_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tab_d0_assign_proc : process(S_AXIS_V_data_V_0_data_out, ap_CS_fsm_state4, ap_CS_fsm_state2, grp_bitonic_sort_fu_271_data_d0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tab_d0 <= S_AXIS_V_data_V_0_data_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tab_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tab_d0 <= grp_bitonic_sort_fu_271_data_d0;
        else 
            tab_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tab_we0_assign_proc : process(S_AXIS_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state2, grp_bitonic_sort_fu_271_data_we0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = S_AXIS_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            tab_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tab_we0 <= grp_bitonic_sort_fu_271_data_we0;
        else 
            tab_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tab_we1_assign_proc : process(grp_bitonic_sort_fu_271_data_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tab_we1 <= grp_bitonic_sort_fu_271_data_we1;
        else 
            tab_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_237),64));
    tmp_2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_260),64));
    tmp_3_fu_352_p2 <= "1" when (i_1_reg_260 = ap_const_lv17_FFFF) else "0";
    tmp_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_161),64));
    tmp_last_V_fu_358_p2 <= (val_4_reg_249 or tmp_3_fu_352_p2);
    tmp_s_fu_287_p2 <= "1" when (invdar_reg_161 = ap_const_lv16_FFFF) else "0";
end behav;
