// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_sort,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.161500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=0,HLS_SYN_FF=22754,HLS_SYN_LUT=43193,HLS_VERSION=2018_2}" *)

module HLS_sort (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TKEEP,
        S_AXIS_TSTRB,
        S_AXIS_TUSER,
        S_AXIS_TLAST,
        S_AXIS_TID,
        S_AXIS_TDEST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TKEEP,
        M_AXIS_TSTRB,
        M_AXIS_TUSER,
        M_AXIS_TLAST,
        M_AXIS_TID,
        M_AXIS_TDEST
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input  [3:0] S_AXIS_TKEEP;
input  [3:0] S_AXIS_TSTRB;
input  [0:0] S_AXIS_TUSER;
input  [0:0] S_AXIS_TLAST;
input  [0:0] S_AXIS_TID;
input  [0:0] S_AXIS_TDEST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output  [3:0] M_AXIS_TKEEP;
output  [3:0] M_AXIS_TSTRB;
output  [0:0] M_AXIS_TUSER;
output  [0:0] M_AXIS_TLAST;
output  [0:0] M_AXIS_TID;
output  [0:0] M_AXIS_TDEST;

 reg    ap_rst_n_inv;
reg   [31:0] S_AXIS_V_data_V_0_data_out;
wire    S_AXIS_V_data_V_0_vld_in;
wire    S_AXIS_V_data_V_0_vld_out;
wire    S_AXIS_V_data_V_0_ack_in;
reg    S_AXIS_V_data_V_0_ack_out;
reg   [31:0] S_AXIS_V_data_V_0_payload_A;
reg   [31:0] S_AXIS_V_data_V_0_payload_B;
reg    S_AXIS_V_data_V_0_sel_rd;
reg    S_AXIS_V_data_V_0_sel_wr;
wire    S_AXIS_V_data_V_0_sel;
wire    S_AXIS_V_data_V_0_load_A;
wire    S_AXIS_V_data_V_0_load_B;
reg   [1:0] S_AXIS_V_data_V_0_state;
wire    S_AXIS_V_data_V_0_state_cmp_full;
reg   [3:0] S_AXIS_V_keep_V_0_data_out;
wire    S_AXIS_V_keep_V_0_vld_in;
wire    S_AXIS_V_keep_V_0_vld_out;
wire    S_AXIS_V_keep_V_0_ack_in;
reg    S_AXIS_V_keep_V_0_ack_out;
reg   [3:0] S_AXIS_V_keep_V_0_payload_A;
reg   [3:0] S_AXIS_V_keep_V_0_payload_B;
reg    S_AXIS_V_keep_V_0_sel_rd;
reg    S_AXIS_V_keep_V_0_sel_wr;
wire    S_AXIS_V_keep_V_0_sel;
wire    S_AXIS_V_keep_V_0_load_A;
wire    S_AXIS_V_keep_V_0_load_B;
reg   [1:0] S_AXIS_V_keep_V_0_state;
wire    S_AXIS_V_keep_V_0_state_cmp_full;
reg   [3:0] S_AXIS_V_strb_V_0_data_out;
wire    S_AXIS_V_strb_V_0_vld_in;
wire    S_AXIS_V_strb_V_0_vld_out;
wire    S_AXIS_V_strb_V_0_ack_in;
reg    S_AXIS_V_strb_V_0_ack_out;
reg   [3:0] S_AXIS_V_strb_V_0_payload_A;
reg   [3:0] S_AXIS_V_strb_V_0_payload_B;
reg    S_AXIS_V_strb_V_0_sel_rd;
reg    S_AXIS_V_strb_V_0_sel_wr;
wire    S_AXIS_V_strb_V_0_sel;
wire    S_AXIS_V_strb_V_0_load_A;
wire    S_AXIS_V_strb_V_0_load_B;
reg   [1:0] S_AXIS_V_strb_V_0_state;
wire    S_AXIS_V_strb_V_0_state_cmp_full;
reg   [0:0] S_AXIS_V_user_V_0_data_out;
wire    S_AXIS_V_user_V_0_vld_in;
wire    S_AXIS_V_user_V_0_vld_out;
wire    S_AXIS_V_user_V_0_ack_in;
reg    S_AXIS_V_user_V_0_ack_out;
reg   [0:0] S_AXIS_V_user_V_0_payload_A;
reg   [0:0] S_AXIS_V_user_V_0_payload_B;
reg    S_AXIS_V_user_V_0_sel_rd;
reg    S_AXIS_V_user_V_0_sel_wr;
wire    S_AXIS_V_user_V_0_sel;
wire    S_AXIS_V_user_V_0_load_A;
wire    S_AXIS_V_user_V_0_load_B;
reg   [1:0] S_AXIS_V_user_V_0_state;
wire    S_AXIS_V_user_V_0_state_cmp_full;
reg   [0:0] S_AXIS_V_id_V_0_data_out;
wire    S_AXIS_V_id_V_0_vld_in;
wire    S_AXIS_V_id_V_0_vld_out;
wire    S_AXIS_V_id_V_0_ack_in;
reg    S_AXIS_V_id_V_0_ack_out;
reg   [0:0] S_AXIS_V_id_V_0_payload_A;
reg   [0:0] S_AXIS_V_id_V_0_payload_B;
reg    S_AXIS_V_id_V_0_sel_rd;
reg    S_AXIS_V_id_V_0_sel_wr;
wire    S_AXIS_V_id_V_0_sel;
wire    S_AXIS_V_id_V_0_load_A;
wire    S_AXIS_V_id_V_0_load_B;
reg   [1:0] S_AXIS_V_id_V_0_state;
wire    S_AXIS_V_id_V_0_state_cmp_full;
reg   [0:0] S_AXIS_V_dest_V_0_data_out;
wire    S_AXIS_V_dest_V_0_vld_in;
wire    S_AXIS_V_dest_V_0_vld_out;
wire    S_AXIS_V_dest_V_0_ack_in;
reg    S_AXIS_V_dest_V_0_ack_out;
reg   [0:0] S_AXIS_V_dest_V_0_payload_A;
reg   [0:0] S_AXIS_V_dest_V_0_payload_B;
reg    S_AXIS_V_dest_V_0_sel_rd;
reg    S_AXIS_V_dest_V_0_sel_wr;
wire    S_AXIS_V_dest_V_0_sel;
wire    S_AXIS_V_dest_V_0_load_A;
wire    S_AXIS_V_dest_V_0_load_B;
reg   [1:0] S_AXIS_V_dest_V_0_state;
wire    S_AXIS_V_dest_V_0_state_cmp_full;
reg   [31:0] M_AXIS_V_data_V_1_data_out;
reg    M_AXIS_V_data_V_1_vld_in;
wire    M_AXIS_V_data_V_1_vld_out;
wire    M_AXIS_V_data_V_1_ack_in;
wire    M_AXIS_V_data_V_1_ack_out;
reg   [31:0] M_AXIS_V_data_V_1_payload_A;
reg   [31:0] M_AXIS_V_data_V_1_payload_B;
reg    M_AXIS_V_data_V_1_sel_rd;
reg    M_AXIS_V_data_V_1_sel_wr;
wire    M_AXIS_V_data_V_1_sel;
wire    M_AXIS_V_data_V_1_load_A;
wire    M_AXIS_V_data_V_1_load_B;
reg   [1:0] M_AXIS_V_data_V_1_state;
wire    M_AXIS_V_data_V_1_state_cmp_full;
reg   [3:0] M_AXIS_V_keep_V_1_data_out;
reg    M_AXIS_V_keep_V_1_vld_in;
wire    M_AXIS_V_keep_V_1_vld_out;
wire    M_AXIS_V_keep_V_1_ack_in;
wire    M_AXIS_V_keep_V_1_ack_out;
reg   [3:0] M_AXIS_V_keep_V_1_payload_A;
reg   [3:0] M_AXIS_V_keep_V_1_payload_B;
reg    M_AXIS_V_keep_V_1_sel_rd;
reg    M_AXIS_V_keep_V_1_sel_wr;
wire    M_AXIS_V_keep_V_1_sel;
wire    M_AXIS_V_keep_V_1_load_A;
wire    M_AXIS_V_keep_V_1_load_B;
reg   [1:0] M_AXIS_V_keep_V_1_state;
wire    M_AXIS_V_keep_V_1_state_cmp_full;
reg   [3:0] M_AXIS_V_strb_V_1_data_out;
reg    M_AXIS_V_strb_V_1_vld_in;
wire    M_AXIS_V_strb_V_1_vld_out;
wire    M_AXIS_V_strb_V_1_ack_in;
wire    M_AXIS_V_strb_V_1_ack_out;
reg   [3:0] M_AXIS_V_strb_V_1_payload_A;
reg   [3:0] M_AXIS_V_strb_V_1_payload_B;
reg    M_AXIS_V_strb_V_1_sel_rd;
reg    M_AXIS_V_strb_V_1_sel_wr;
wire    M_AXIS_V_strb_V_1_sel;
wire    M_AXIS_V_strb_V_1_load_A;
wire    M_AXIS_V_strb_V_1_load_B;
reg   [1:0] M_AXIS_V_strb_V_1_state;
wire    M_AXIS_V_strb_V_1_state_cmp_full;
reg   [0:0] M_AXIS_V_user_V_1_data_out;
reg    M_AXIS_V_user_V_1_vld_in;
wire    M_AXIS_V_user_V_1_vld_out;
wire    M_AXIS_V_user_V_1_ack_in;
wire    M_AXIS_V_user_V_1_ack_out;
reg   [0:0] M_AXIS_V_user_V_1_payload_A;
reg   [0:0] M_AXIS_V_user_V_1_payload_B;
reg    M_AXIS_V_user_V_1_sel_rd;
reg    M_AXIS_V_user_V_1_sel_wr;
wire    M_AXIS_V_user_V_1_sel;
wire    M_AXIS_V_user_V_1_load_A;
wire    M_AXIS_V_user_V_1_load_B;
reg   [1:0] M_AXIS_V_user_V_1_state;
wire    M_AXIS_V_user_V_1_state_cmp_full;
reg   [0:0] M_AXIS_V_last_V_1_data_out;
reg    M_AXIS_V_last_V_1_vld_in;
wire    M_AXIS_V_last_V_1_vld_out;
wire    M_AXIS_V_last_V_1_ack_in;
wire    M_AXIS_V_last_V_1_ack_out;
reg   [0:0] M_AXIS_V_last_V_1_payload_A;
reg   [0:0] M_AXIS_V_last_V_1_payload_B;
reg    M_AXIS_V_last_V_1_sel_rd;
reg    M_AXIS_V_last_V_1_sel_wr;
wire    M_AXIS_V_last_V_1_sel;
wire    M_AXIS_V_last_V_1_load_A;
wire    M_AXIS_V_last_V_1_load_B;
reg   [1:0] M_AXIS_V_last_V_1_state;
wire    M_AXIS_V_last_V_1_state_cmp_full;
reg   [0:0] M_AXIS_V_id_V_1_data_out;
reg    M_AXIS_V_id_V_1_vld_in;
wire    M_AXIS_V_id_V_1_vld_out;
wire    M_AXIS_V_id_V_1_ack_in;
wire    M_AXIS_V_id_V_1_ack_out;
reg   [0:0] M_AXIS_V_id_V_1_payload_A;
reg   [0:0] M_AXIS_V_id_V_1_payload_B;
reg    M_AXIS_V_id_V_1_sel_rd;
reg    M_AXIS_V_id_V_1_sel_wr;
wire    M_AXIS_V_id_V_1_sel;
wire    M_AXIS_V_id_V_1_load_A;
wire    M_AXIS_V_id_V_1_load_B;
reg   [1:0] M_AXIS_V_id_V_1_state;
wire    M_AXIS_V_id_V_1_state_cmp_full;
reg   [0:0] M_AXIS_V_dest_V_1_data_out;
reg    M_AXIS_V_dest_V_1_vld_in;
wire    M_AXIS_V_dest_V_1_vld_out;
wire    M_AXIS_V_dest_V_1_ack_in;
wire    M_AXIS_V_dest_V_1_ack_out;
reg   [0:0] M_AXIS_V_dest_V_1_payload_A;
reg   [0:0] M_AXIS_V_dest_V_1_payload_B;
reg    M_AXIS_V_dest_V_1_sel_rd;
reg    M_AXIS_V_dest_V_1_sel_wr;
wire    M_AXIS_V_dest_V_1_sel;
wire    M_AXIS_V_dest_V_1_load_A;
wire    M_AXIS_V_dest_V_1_load_B;
reg   [1:0] M_AXIS_V_dest_V_1_state;
wire    M_AXIS_V_dest_V_1_state_cmp_full;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [15:0] indvarinc_fu_276_p2;
wire    ap_CS_fsm_state2;
wire   [16:0] i_2_fu_299_p2;
reg   [16:0] i_2_reg_375;
wire    ap_CS_fsm_state3;
wire   [16:0] i_3_fu_341_p2;
reg   [16:0] i_3_reg_408;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
wire   [0:0] exitcond_fu_335_p2;
wire   [0:0] tmp_last_V_fu_358_p2;
reg   [0:0] tmp_last_V_reg_418;
wire   [31:0] tab_q0;
reg   [15:0] tab_address0;
reg    tab_ce0;
reg    tab_we0;
reg   [31:0] tab_d0;
reg    tab_ce1;
reg    tab_we1;
wire   [31:0] tab_q1;
wire    grp_bitonic_sort_fu_271_ap_start;
wire    grp_bitonic_sort_fu_271_ap_done;
wire    grp_bitonic_sort_fu_271_ap_idle;
wire    grp_bitonic_sort_fu_271_ap_ready;
wire   [15:0] grp_bitonic_sort_fu_271_data_address0;
wire    grp_bitonic_sort_fu_271_data_ce0;
wire    grp_bitonic_sort_fu_271_data_we0;
wire   [31:0] grp_bitonic_sort_fu_271_data_d0;
wire   [15:0] grp_bitonic_sort_fu_271_data_address1;
wire    grp_bitonic_sort_fu_271_data_ce1;
wire    grp_bitonic_sort_fu_271_data_we1;
wire   [31:0] grp_bitonic_sort_fu_271_data_d1;
reg   [15:0] invdar_reg_161;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_s_fu_287_p2;
reg   [0:0] tmp_dest_V_reg_172;
reg   [0:0] tmp_id_V_reg_185;
reg   [0:0] tmp_user_V_reg_198;
reg   [3:0] tmp_strb_V_reg_211;
reg   [3:0] tmp_keep_V_reg_224;
reg   [16:0] i_reg_237;
reg   [0:0] val_4_reg_249;
wire    ap_CS_fsm_state5;
reg   [16:0] i_1_reg_260;
reg    grp_bitonic_sort_fu_271_ap_start_reg;
wire   [0:0] exitcond1_fu_293_p2;
wire   [63:0] tmp_fu_282_p1;
wire   [63:0] tmp_1_fu_330_p1;
wire   [63:0] tmp_2_fu_347_p1;
wire   [0:0] tmp_3_fu_352_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 S_AXIS_V_data_V_0_sel_rd = 1'b0;
#0 S_AXIS_V_data_V_0_sel_wr = 1'b0;
#0 S_AXIS_V_data_V_0_state = 2'd0;
#0 S_AXIS_V_keep_V_0_sel_rd = 1'b0;
#0 S_AXIS_V_keep_V_0_sel_wr = 1'b0;
#0 S_AXIS_V_keep_V_0_state = 2'd0;
#0 S_AXIS_V_strb_V_0_sel_rd = 1'b0;
#0 S_AXIS_V_strb_V_0_sel_wr = 1'b0;
#0 S_AXIS_V_strb_V_0_state = 2'd0;
#0 S_AXIS_V_user_V_0_sel_rd = 1'b0;
#0 S_AXIS_V_user_V_0_sel_wr = 1'b0;
#0 S_AXIS_V_user_V_0_state = 2'd0;
#0 S_AXIS_V_id_V_0_sel_rd = 1'b0;
#0 S_AXIS_V_id_V_0_sel_wr = 1'b0;
#0 S_AXIS_V_id_V_0_state = 2'd0;
#0 S_AXIS_V_dest_V_0_sel_rd = 1'b0;
#0 S_AXIS_V_dest_V_0_sel_wr = 1'b0;
#0 S_AXIS_V_dest_V_0_state = 2'd0;
#0 M_AXIS_V_data_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_data_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_data_V_1_state = 2'd0;
#0 M_AXIS_V_keep_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_keep_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_keep_V_1_state = 2'd0;
#0 M_AXIS_V_strb_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_strb_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_strb_V_1_state = 2'd0;
#0 M_AXIS_V_user_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_user_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_user_V_1_state = 2'd0;
#0 M_AXIS_V_last_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_last_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_last_V_1_state = 2'd0;
#0 M_AXIS_V_id_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_id_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_id_V_1_state = 2'd0;
#0 M_AXIS_V_dest_V_1_sel_rd = 1'b0;
#0 M_AXIS_V_dest_V_1_sel_wr = 1'b0;
#0 M_AXIS_V_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 8'd1;
#0 grp_bitonic_sort_fu_271_ap_start_reg = 1'b0;
end

HLS_sort_tab #(
    .DataWidth( 32 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
tab_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tab_address0),
    .ce0(tab_ce0),
    .we0(tab_we0),
    .d0(tab_d0),
    .q0(tab_q0),
    .address1(grp_bitonic_sort_fu_271_data_address1),
    .ce1(tab_ce1),
    .we1(tab_we1),
    .d1(grp_bitonic_sort_fu_271_data_d1),
    .q1(tab_q1)
);

bitonic_sort grp_bitonic_sort_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_bitonic_sort_fu_271_ap_start),
    .ap_done(grp_bitonic_sort_fu_271_ap_done),
    .ap_idle(grp_bitonic_sort_fu_271_ap_idle),
    .ap_ready(grp_bitonic_sort_fu_271_ap_ready),
    .data_address0(grp_bitonic_sort_fu_271_data_address0),
    .data_ce0(grp_bitonic_sort_fu_271_data_ce0),
    .data_we0(grp_bitonic_sort_fu_271_data_we0),
    .data_d0(grp_bitonic_sort_fu_271_data_d0),
    .data_q0(tab_q0),
    .data_address1(grp_bitonic_sort_fu_271_data_address1),
    .data_ce1(grp_bitonic_sort_fu_271_data_ce1),
    .data_we1(grp_bitonic_sort_fu_271_data_we1),
    .data_d1(grp_bitonic_sort_fu_271_data_d1),
    .data_q1(tab_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_V_1_ack_out) & (1'b1 == M_AXIS_V_data_V_1_vld_out))) begin
            M_AXIS_V_data_V_1_sel_rd <= ~M_AXIS_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == M_AXIS_V_data_V_1_vld_in))) begin
            M_AXIS_V_data_V_1_sel_wr <= ~M_AXIS_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_vld_in)) | ((2'd3 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_vld_in) & (1'b1 == M_AXIS_V_data_V_1_ack_out)))) begin
            M_AXIS_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_ack_out)) | ((2'd3 == M_AXIS_V_data_V_1_state) & (1'b0 == M_AXIS_V_data_V_1_ack_out) & (1'b1 == M_AXIS_V_data_V_1_vld_in)))) begin
            M_AXIS_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_data_V_1_vld_in) & (1'b1 == M_AXIS_V_data_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_data_V_1_ack_out) & (1'b1 == M_AXIS_V_data_V_1_vld_in)) & (2'd3 == M_AXIS_V_data_V_1_state)) | ((2'd1 == M_AXIS_V_data_V_1_state) & (1'b1 == M_AXIS_V_data_V_1_ack_out)) | ((2'd2 == M_AXIS_V_data_V_1_state) & (1'b1 == M_AXIS_V_data_V_1_vld_in)))) begin
            M_AXIS_V_data_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_dest_V_1_ack_out) & (1'b1 == M_AXIS_V_dest_V_1_vld_out))) begin
            M_AXIS_V_dest_V_1_sel_rd <= ~M_AXIS_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_dest_V_1_ack_in) & (1'b1 == M_AXIS_V_dest_V_1_vld_in))) begin
            M_AXIS_V_dest_V_1_sel_wr <= ~M_AXIS_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_vld_in)) | ((2'd3 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_vld_in) & (1'b1 == M_AXIS_V_dest_V_1_ack_out)))) begin
            M_AXIS_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_ack_out)) | ((2'd3 == M_AXIS_V_dest_V_1_state) & (1'b0 == M_AXIS_V_dest_V_1_ack_out) & (1'b1 == M_AXIS_V_dest_V_1_vld_in)))) begin
            M_AXIS_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_dest_V_1_vld_in) & (1'b1 == M_AXIS_V_dest_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_dest_V_1_ack_out) & (1'b1 == M_AXIS_V_dest_V_1_vld_in)) & (2'd3 == M_AXIS_V_dest_V_1_state)) | ((2'd1 == M_AXIS_V_dest_V_1_state) & (1'b1 == M_AXIS_V_dest_V_1_ack_out)) | ((2'd2 == M_AXIS_V_dest_V_1_state) & (1'b1 == M_AXIS_V_dest_V_1_vld_in)))) begin
            M_AXIS_V_dest_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_id_V_1_ack_out) & (1'b1 == M_AXIS_V_id_V_1_vld_out))) begin
            M_AXIS_V_id_V_1_sel_rd <= ~M_AXIS_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_id_V_1_ack_in) & (1'b1 == M_AXIS_V_id_V_1_vld_in))) begin
            M_AXIS_V_id_V_1_sel_wr <= ~M_AXIS_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_vld_in)) | ((2'd3 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_vld_in) & (1'b1 == M_AXIS_V_id_V_1_ack_out)))) begin
            M_AXIS_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_ack_out)) | ((2'd3 == M_AXIS_V_id_V_1_state) & (1'b0 == M_AXIS_V_id_V_1_ack_out) & (1'b1 == M_AXIS_V_id_V_1_vld_in)))) begin
            M_AXIS_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_id_V_1_vld_in) & (1'b1 == M_AXIS_V_id_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_id_V_1_ack_out) & (1'b1 == M_AXIS_V_id_V_1_vld_in)) & (2'd3 == M_AXIS_V_id_V_1_state)) | ((2'd1 == M_AXIS_V_id_V_1_state) & (1'b1 == M_AXIS_V_id_V_1_ack_out)) | ((2'd2 == M_AXIS_V_id_V_1_state) & (1'b1 == M_AXIS_V_id_V_1_vld_in)))) begin
            M_AXIS_V_id_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_keep_V_1_ack_out) & (1'b1 == M_AXIS_V_keep_V_1_vld_out))) begin
            M_AXIS_V_keep_V_1_sel_rd <= ~M_AXIS_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_keep_V_1_ack_in) & (1'b1 == M_AXIS_V_keep_V_1_vld_in))) begin
            M_AXIS_V_keep_V_1_sel_wr <= ~M_AXIS_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_vld_in)) | ((2'd3 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_vld_in) & (1'b1 == M_AXIS_V_keep_V_1_ack_out)))) begin
            M_AXIS_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_ack_out)) | ((2'd3 == M_AXIS_V_keep_V_1_state) & (1'b0 == M_AXIS_V_keep_V_1_ack_out) & (1'b1 == M_AXIS_V_keep_V_1_vld_in)))) begin
            M_AXIS_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_keep_V_1_vld_in) & (1'b1 == M_AXIS_V_keep_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_keep_V_1_ack_out) & (1'b1 == M_AXIS_V_keep_V_1_vld_in)) & (2'd3 == M_AXIS_V_keep_V_1_state)) | ((2'd1 == M_AXIS_V_keep_V_1_state) & (1'b1 == M_AXIS_V_keep_V_1_ack_out)) | ((2'd2 == M_AXIS_V_keep_V_1_state) & (1'b1 == M_AXIS_V_keep_V_1_vld_in)))) begin
            M_AXIS_V_keep_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_last_V_1_ack_out) & (1'b1 == M_AXIS_V_last_V_1_vld_out))) begin
            M_AXIS_V_last_V_1_sel_rd <= ~M_AXIS_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_last_V_1_ack_in) & (1'b1 == M_AXIS_V_last_V_1_vld_in))) begin
            M_AXIS_V_last_V_1_sel_wr <= ~M_AXIS_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_vld_in)) | ((2'd3 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_vld_in) & (1'b1 == M_AXIS_V_last_V_1_ack_out)))) begin
            M_AXIS_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_ack_out)) | ((2'd3 == M_AXIS_V_last_V_1_state) & (1'b0 == M_AXIS_V_last_V_1_ack_out) & (1'b1 == M_AXIS_V_last_V_1_vld_in)))) begin
            M_AXIS_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_last_V_1_vld_in) & (1'b1 == M_AXIS_V_last_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_last_V_1_ack_out) & (1'b1 == M_AXIS_V_last_V_1_vld_in)) & (2'd3 == M_AXIS_V_last_V_1_state)) | ((2'd1 == M_AXIS_V_last_V_1_state) & (1'b1 == M_AXIS_V_last_V_1_ack_out)) | ((2'd2 == M_AXIS_V_last_V_1_state) & (1'b1 == M_AXIS_V_last_V_1_vld_in)))) begin
            M_AXIS_V_last_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_strb_V_1_ack_out) & (1'b1 == M_AXIS_V_strb_V_1_vld_out))) begin
            M_AXIS_V_strb_V_1_sel_rd <= ~M_AXIS_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_strb_V_1_ack_in) & (1'b1 == M_AXIS_V_strb_V_1_vld_in))) begin
            M_AXIS_V_strb_V_1_sel_wr <= ~M_AXIS_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_vld_in)) | ((2'd3 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_vld_in) & (1'b1 == M_AXIS_V_strb_V_1_ack_out)))) begin
            M_AXIS_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_ack_out)) | ((2'd3 == M_AXIS_V_strb_V_1_state) & (1'b0 == M_AXIS_V_strb_V_1_ack_out) & (1'b1 == M_AXIS_V_strb_V_1_vld_in)))) begin
            M_AXIS_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_strb_V_1_vld_in) & (1'b1 == M_AXIS_V_strb_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_strb_V_1_ack_out) & (1'b1 == M_AXIS_V_strb_V_1_vld_in)) & (2'd3 == M_AXIS_V_strb_V_1_state)) | ((2'd1 == M_AXIS_V_strb_V_1_state) & (1'b1 == M_AXIS_V_strb_V_1_ack_out)) | ((2'd2 == M_AXIS_V_strb_V_1_state) & (1'b1 == M_AXIS_V_strb_V_1_vld_in)))) begin
            M_AXIS_V_strb_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_user_V_1_ack_out) & (1'b1 == M_AXIS_V_user_V_1_vld_out))) begin
            M_AXIS_V_user_V_1_sel_rd <= ~M_AXIS_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == M_AXIS_V_user_V_1_ack_in) & (1'b1 == M_AXIS_V_user_V_1_vld_in))) begin
            M_AXIS_V_user_V_1_sel_wr <= ~M_AXIS_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        M_AXIS_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_vld_in)) | ((2'd3 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_vld_in) & (1'b1 == M_AXIS_V_user_V_1_ack_out)))) begin
            M_AXIS_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_ack_out)) | ((2'd3 == M_AXIS_V_user_V_1_state) & (1'b0 == M_AXIS_V_user_V_1_ack_out) & (1'b1 == M_AXIS_V_user_V_1_vld_in)))) begin
            M_AXIS_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == M_AXIS_V_user_V_1_vld_in) & (1'b1 == M_AXIS_V_user_V_1_ack_out)) & ~((1'b0 == M_AXIS_V_user_V_1_ack_out) & (1'b1 == M_AXIS_V_user_V_1_vld_in)) & (2'd3 == M_AXIS_V_user_V_1_state)) | ((2'd1 == M_AXIS_V_user_V_1_state) & (1'b1 == M_AXIS_V_user_V_1_ack_out)) | ((2'd2 == M_AXIS_V_user_V_1_state) & (1'b1 == M_AXIS_V_user_V_1_vld_in)))) begin
            M_AXIS_V_user_V_1_state <= 2'd3;
        end else begin
            M_AXIS_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_V_0_ack_out) & (1'b1 == S_AXIS_V_data_V_0_vld_out))) begin
            S_AXIS_V_data_V_0_sel_rd <= ~S_AXIS_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_data_V_0_ack_in) & (1'b1 == S_AXIS_V_data_V_0_vld_in))) begin
            S_AXIS_V_data_V_0_sel_wr <= ~S_AXIS_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_vld_in)) | ((2'd3 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_vld_in) & (1'b1 == S_AXIS_V_data_V_0_ack_out)))) begin
            S_AXIS_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_ack_out)) | ((2'd3 == S_AXIS_V_data_V_0_state) & (1'b0 == S_AXIS_V_data_V_0_ack_out) & (1'b1 == S_AXIS_V_data_V_0_vld_in)))) begin
            S_AXIS_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_data_V_0_vld_in) & (1'b1 == S_AXIS_V_data_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_data_V_0_ack_out) & (1'b1 == S_AXIS_V_data_V_0_vld_in)) & (2'd3 == S_AXIS_V_data_V_0_state)) | ((2'd1 == S_AXIS_V_data_V_0_state) & (1'b1 == S_AXIS_V_data_V_0_ack_out)) | ((2'd2 == S_AXIS_V_data_V_0_state) & (1'b1 == S_AXIS_V_data_V_0_vld_in)))) begin
            S_AXIS_V_data_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_dest_V_0_ack_out) & (1'b1 == S_AXIS_V_dest_V_0_vld_out))) begin
            S_AXIS_V_dest_V_0_sel_rd <= ~S_AXIS_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_dest_V_0_ack_in) & (1'b1 == S_AXIS_V_dest_V_0_vld_in))) begin
            S_AXIS_V_dest_V_0_sel_wr <= ~S_AXIS_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_vld_in)) | ((2'd3 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_vld_in) & (1'b1 == S_AXIS_V_dest_V_0_ack_out)))) begin
            S_AXIS_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_ack_out)) | ((2'd3 == S_AXIS_V_dest_V_0_state) & (1'b0 == S_AXIS_V_dest_V_0_ack_out) & (1'b1 == S_AXIS_V_dest_V_0_vld_in)))) begin
            S_AXIS_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_dest_V_0_vld_in) & (1'b1 == S_AXIS_V_dest_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_dest_V_0_ack_out) & (1'b1 == S_AXIS_V_dest_V_0_vld_in)) & (2'd3 == S_AXIS_V_dest_V_0_state)) | ((2'd1 == S_AXIS_V_dest_V_0_state) & (1'b1 == S_AXIS_V_dest_V_0_ack_out)) | ((2'd2 == S_AXIS_V_dest_V_0_state) & (1'b1 == S_AXIS_V_dest_V_0_vld_in)))) begin
            S_AXIS_V_dest_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_id_V_0_ack_out) & (1'b1 == S_AXIS_V_id_V_0_vld_out))) begin
            S_AXIS_V_id_V_0_sel_rd <= ~S_AXIS_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_id_V_0_ack_in) & (1'b1 == S_AXIS_V_id_V_0_vld_in))) begin
            S_AXIS_V_id_V_0_sel_wr <= ~S_AXIS_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_id_V_0_state) & (1'b0 == S_AXIS_V_id_V_0_vld_in)) | ((2'd3 == S_AXIS_V_id_V_0_state) & (1'b0 == S_AXIS_V_id_V_0_vld_in) & (1'b1 == S_AXIS_V_id_V_0_ack_out)))) begin
            S_AXIS_V_id_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_id_V_0_state) & (1'b0 == S_AXIS_V_id_V_0_ack_out)) | ((2'd3 == S_AXIS_V_id_V_0_state) & (1'b0 == S_AXIS_V_id_V_0_ack_out) & (1'b1 == S_AXIS_V_id_V_0_vld_in)))) begin
            S_AXIS_V_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_id_V_0_vld_in) & (1'b1 == S_AXIS_V_id_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_id_V_0_ack_out) & (1'b1 == S_AXIS_V_id_V_0_vld_in)) & (2'd3 == S_AXIS_V_id_V_0_state)) | ((2'd1 == S_AXIS_V_id_V_0_state) & (1'b1 == S_AXIS_V_id_V_0_ack_out)) | ((2'd2 == S_AXIS_V_id_V_0_state) & (1'b1 == S_AXIS_V_id_V_0_vld_in)))) begin
            S_AXIS_V_id_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_keep_V_0_ack_out) & (1'b1 == S_AXIS_V_keep_V_0_vld_out))) begin
            S_AXIS_V_keep_V_0_sel_rd <= ~S_AXIS_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_keep_V_0_ack_in) & (1'b1 == S_AXIS_V_keep_V_0_vld_in))) begin
            S_AXIS_V_keep_V_0_sel_wr <= ~S_AXIS_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_keep_V_0_state) & (1'b0 == S_AXIS_V_keep_V_0_vld_in)) | ((2'd3 == S_AXIS_V_keep_V_0_state) & (1'b0 == S_AXIS_V_keep_V_0_vld_in) & (1'b1 == S_AXIS_V_keep_V_0_ack_out)))) begin
            S_AXIS_V_keep_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_keep_V_0_state) & (1'b0 == S_AXIS_V_keep_V_0_ack_out)) | ((2'd3 == S_AXIS_V_keep_V_0_state) & (1'b0 == S_AXIS_V_keep_V_0_ack_out) & (1'b1 == S_AXIS_V_keep_V_0_vld_in)))) begin
            S_AXIS_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_keep_V_0_vld_in) & (1'b1 == S_AXIS_V_keep_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_keep_V_0_ack_out) & (1'b1 == S_AXIS_V_keep_V_0_vld_in)) & (2'd3 == S_AXIS_V_keep_V_0_state)) | ((2'd1 == S_AXIS_V_keep_V_0_state) & (1'b1 == S_AXIS_V_keep_V_0_ack_out)) | ((2'd2 == S_AXIS_V_keep_V_0_state) & (1'b1 == S_AXIS_V_keep_V_0_vld_in)))) begin
            S_AXIS_V_keep_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_strb_V_0_ack_out) & (1'b1 == S_AXIS_V_strb_V_0_vld_out))) begin
            S_AXIS_V_strb_V_0_sel_rd <= ~S_AXIS_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_strb_V_0_ack_in) & (1'b1 == S_AXIS_V_strb_V_0_vld_in))) begin
            S_AXIS_V_strb_V_0_sel_wr <= ~S_AXIS_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_strb_V_0_state) & (1'b0 == S_AXIS_V_strb_V_0_vld_in)) | ((2'd3 == S_AXIS_V_strb_V_0_state) & (1'b0 == S_AXIS_V_strb_V_0_vld_in) & (1'b1 == S_AXIS_V_strb_V_0_ack_out)))) begin
            S_AXIS_V_strb_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_strb_V_0_state) & (1'b0 == S_AXIS_V_strb_V_0_ack_out)) | ((2'd3 == S_AXIS_V_strb_V_0_state) & (1'b0 == S_AXIS_V_strb_V_0_ack_out) & (1'b1 == S_AXIS_V_strb_V_0_vld_in)))) begin
            S_AXIS_V_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_strb_V_0_vld_in) & (1'b1 == S_AXIS_V_strb_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_strb_V_0_ack_out) & (1'b1 == S_AXIS_V_strb_V_0_vld_in)) & (2'd3 == S_AXIS_V_strb_V_0_state)) | ((2'd1 == S_AXIS_V_strb_V_0_state) & (1'b1 == S_AXIS_V_strb_V_0_ack_out)) | ((2'd2 == S_AXIS_V_strb_V_0_state) & (1'b1 == S_AXIS_V_strb_V_0_vld_in)))) begin
            S_AXIS_V_strb_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_user_V_0_ack_out) & (1'b1 == S_AXIS_V_user_V_0_vld_out))) begin
            S_AXIS_V_user_V_0_sel_rd <= ~S_AXIS_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == S_AXIS_V_user_V_0_ack_in) & (1'b1 == S_AXIS_V_user_V_0_vld_in))) begin
            S_AXIS_V_user_V_0_sel_wr <= ~S_AXIS_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        S_AXIS_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == S_AXIS_V_user_V_0_state) & (1'b0 == S_AXIS_V_user_V_0_vld_in)) | ((2'd3 == S_AXIS_V_user_V_0_state) & (1'b0 == S_AXIS_V_user_V_0_vld_in) & (1'b1 == S_AXIS_V_user_V_0_ack_out)))) begin
            S_AXIS_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == S_AXIS_V_user_V_0_state) & (1'b0 == S_AXIS_V_user_V_0_ack_out)) | ((2'd3 == S_AXIS_V_user_V_0_state) & (1'b0 == S_AXIS_V_user_V_0_ack_out) & (1'b1 == S_AXIS_V_user_V_0_vld_in)))) begin
            S_AXIS_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == S_AXIS_V_user_V_0_vld_in) & (1'b1 == S_AXIS_V_user_V_0_ack_out)) & ~((1'b0 == S_AXIS_V_user_V_0_ack_out) & (1'b1 == S_AXIS_V_user_V_0_vld_in)) & (2'd3 == S_AXIS_V_user_V_0_state)) | ((2'd1 == S_AXIS_V_user_V_0_state) & (1'b1 == S_AXIS_V_user_V_0_ack_out)) | ((2'd2 == S_AXIS_V_user_V_0_state) & (1'b1 == S_AXIS_V_user_V_0_vld_in)))) begin
            S_AXIS_V_user_V_0_state <= 2'd3;
        end else begin
            S_AXIS_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_bitonic_sort_fu_271_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond1_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_bitonic_sort_fu_271_ap_start_reg <= 1'b1;
        end else if ((grp_bitonic_sort_fu_271_ap_ready == 1'b1)) begin
            grp_bitonic_sort_fu_271_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state8))) begin
        i_1_reg_260 <= i_3_reg_408;
    end else if (((grp_bitonic_sort_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_260 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_237 <= 17'd0;
    end else if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_237 <= i_2_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_161 <= indvarinc_fu_276_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        invdar_reg_161 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state8))) begin
        val_4_reg_249 <= tmp_last_V_reg_418;
    end else if (((grp_bitonic_sort_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        val_4_reg_249 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_V_1_load_A)) begin
        M_AXIS_V_data_V_1_payload_A <= tab_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_data_V_1_load_B)) begin
        M_AXIS_V_data_V_1_payload_B <= tab_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_dest_V_1_load_A)) begin
        M_AXIS_V_dest_V_1_payload_A <= tmp_dest_V_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_dest_V_1_load_B)) begin
        M_AXIS_V_dest_V_1_payload_B <= tmp_dest_V_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_id_V_1_load_A)) begin
        M_AXIS_V_id_V_1_payload_A <= tmp_id_V_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_id_V_1_load_B)) begin
        M_AXIS_V_id_V_1_payload_B <= tmp_id_V_reg_185;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_keep_V_1_load_A)) begin
        M_AXIS_V_keep_V_1_payload_A <= tmp_keep_V_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_keep_V_1_load_B)) begin
        M_AXIS_V_keep_V_1_payload_B <= tmp_keep_V_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_last_V_1_load_A)) begin
        M_AXIS_V_last_V_1_payload_A <= tmp_last_V_reg_418;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_last_V_1_load_B)) begin
        M_AXIS_V_last_V_1_payload_B <= tmp_last_V_reg_418;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_strb_V_1_load_A)) begin
        M_AXIS_V_strb_V_1_payload_A <= tmp_strb_V_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_strb_V_1_load_B)) begin
        M_AXIS_V_strb_V_1_payload_B <= tmp_strb_V_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_user_V_1_load_A)) begin
        M_AXIS_V_user_V_1_payload_A <= tmp_user_V_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == M_AXIS_V_user_V_1_load_B)) begin
        M_AXIS_V_user_V_1_payload_B <= tmp_user_V_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_V_0_load_A)) begin
        S_AXIS_V_data_V_0_payload_A <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_data_V_0_load_B)) begin
        S_AXIS_V_data_V_0_payload_B <= S_AXIS_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_dest_V_0_load_A)) begin
        S_AXIS_V_dest_V_0_payload_A <= S_AXIS_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_dest_V_0_load_B)) begin
        S_AXIS_V_dest_V_0_payload_B <= S_AXIS_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_id_V_0_load_A)) begin
        S_AXIS_V_id_V_0_payload_A <= S_AXIS_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_id_V_0_load_B)) begin
        S_AXIS_V_id_V_0_payload_B <= S_AXIS_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_keep_V_0_load_A)) begin
        S_AXIS_V_keep_V_0_payload_A <= S_AXIS_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_keep_V_0_load_B)) begin
        S_AXIS_V_keep_V_0_payload_B <= S_AXIS_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_strb_V_0_load_A)) begin
        S_AXIS_V_strb_V_0_payload_A <= S_AXIS_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_strb_V_0_load_B)) begin
        S_AXIS_V_strb_V_0_payload_B <= S_AXIS_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_user_V_0_load_A)) begin
        S_AXIS_V_user_V_0_payload_A <= S_AXIS_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == S_AXIS_V_user_V_0_load_B)) begin
        S_AXIS_V_user_V_0_payload_B <= S_AXIS_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_375 <= i_2_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state6))) begin
        i_3_reg_408 <= i_3_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_dest_V_reg_172 <= S_AXIS_V_dest_V_0_data_out;
        tmp_id_V_reg_185 <= S_AXIS_V_id_V_0_data_out;
        tmp_keep_V_reg_224 <= S_AXIS_V_keep_V_0_data_out;
        tmp_strb_V_reg_211 <= S_AXIS_V_strb_V_0_data_out;
        tmp_user_V_reg_198 <= S_AXIS_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (exitcond_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_last_V_reg_418 <= tmp_last_V_fu_358_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_V_data_V_1_state[1'd1];
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_data_V_1_sel)) begin
        M_AXIS_V_data_V_1_data_out = M_AXIS_V_data_V_1_payload_B;
    end else begin
        M_AXIS_V_data_V_1_data_out = M_AXIS_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_V_data_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_dest_V_1_sel)) begin
        M_AXIS_V_dest_V_1_data_out = M_AXIS_V_dest_V_1_payload_B;
    end else begin
        M_AXIS_V_dest_V_1_data_out = M_AXIS_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_V_dest_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_id_V_1_sel)) begin
        M_AXIS_V_id_V_1_data_out = M_AXIS_V_id_V_1_payload_B;
    end else begin
        M_AXIS_V_id_V_1_data_out = M_AXIS_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_V_id_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_keep_V_1_sel)) begin
        M_AXIS_V_keep_V_1_data_out = M_AXIS_V_keep_V_1_payload_B;
    end else begin
        M_AXIS_V_keep_V_1_data_out = M_AXIS_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_V_keep_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_last_V_1_sel)) begin
        M_AXIS_V_last_V_1_data_out = M_AXIS_V_last_V_1_payload_B;
    end else begin
        M_AXIS_V_last_V_1_data_out = M_AXIS_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_V_last_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_strb_V_1_sel)) begin
        M_AXIS_V_strb_V_1_data_out = M_AXIS_V_strb_V_1_payload_B;
    end else begin
        M_AXIS_V_strb_V_1_data_out = M_AXIS_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_V_strb_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == M_AXIS_V_user_V_1_sel)) begin
        M_AXIS_V_user_V_1_data_out = M_AXIS_V_user_V_1_payload_B;
    end else begin
        M_AXIS_V_user_V_1_data_out = M_AXIS_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
        M_AXIS_V_user_V_1_vld_in = 1'b1;
    end else begin
        M_AXIS_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        S_AXIS_TDATA_blk_n = S_AXIS_V_data_V_0_state[1'd0];
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_data_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_data_V_0_sel)) begin
        S_AXIS_V_data_V_0_data_out = S_AXIS_V_data_V_0_payload_B;
    end else begin
        S_AXIS_V_data_V_0_data_out = S_AXIS_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_dest_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_dest_V_0_sel)) begin
        S_AXIS_V_dest_V_0_data_out = S_AXIS_V_dest_V_0_payload_B;
    end else begin
        S_AXIS_V_dest_V_0_data_out = S_AXIS_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_id_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_id_V_0_sel)) begin
        S_AXIS_V_id_V_0_data_out = S_AXIS_V_id_V_0_payload_B;
    end else begin
        S_AXIS_V_id_V_0_data_out = S_AXIS_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_keep_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_keep_V_0_sel)) begin
        S_AXIS_V_keep_V_0_data_out = S_AXIS_V_keep_V_0_payload_B;
    end else begin
        S_AXIS_V_keep_V_0_data_out = S_AXIS_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_strb_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_strb_V_0_sel)) begin
        S_AXIS_V_strb_V_0_data_out = S_AXIS_V_strb_V_0_payload_B;
    end else begin
        S_AXIS_V_strb_V_0_data_out = S_AXIS_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
        S_AXIS_V_user_V_0_ack_out = 1'b1;
    end else begin
        S_AXIS_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == S_AXIS_V_user_V_0_sel)) begin
        S_AXIS_V_user_V_0_data_out = S_AXIS_V_user_V_0_payload_B;
    end else begin
        S_AXIS_V_user_V_0_data_out = S_AXIS_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tab_address0 = tmp_2_fu_347_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tab_address0 = tmp_1_fu_330_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tab_address0 = tmp_fu_282_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tab_address0 = grp_bitonic_sort_fu_271_data_address0;
    end else begin
        tab_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4)))) begin
        tab_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tab_ce0 = grp_bitonic_sort_fu_271_data_ce0;
    end else begin
        tab_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tab_ce1 = grp_bitonic_sort_fu_271_data_ce1;
    end else begin
        tab_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tab_d0 = S_AXIS_V_data_V_0_data_out;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tab_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tab_d0 = grp_bitonic_sort_fu_271_data_d0;
    end else begin
        tab_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4)))) begin
        tab_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tab_we0 = grp_bitonic_sort_fu_271_data_we0;
    end else begin
        tab_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tab_we1 = grp_bitonic_sort_fu_271_data_we1;
    end else begin
        tab_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == S_AXIS_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_bitonic_sort_fu_271_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (exitcond_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in)) & (exitcond_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == M_AXIS_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TDATA = M_AXIS_V_data_V_1_data_out;

assign M_AXIS_TDEST = M_AXIS_V_dest_V_1_data_out;

assign M_AXIS_TID = M_AXIS_V_id_V_1_data_out;

assign M_AXIS_TKEEP = M_AXIS_V_keep_V_1_data_out;

assign M_AXIS_TLAST = M_AXIS_V_last_V_1_data_out;

assign M_AXIS_TSTRB = M_AXIS_V_strb_V_1_data_out;

assign M_AXIS_TUSER = M_AXIS_V_user_V_1_data_out;

assign M_AXIS_TVALID = M_AXIS_V_dest_V_1_state[1'd0];

assign M_AXIS_V_data_V_1_ack_in = M_AXIS_V_data_V_1_state[1'd1];

assign M_AXIS_V_data_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_data_V_1_load_A = (~M_AXIS_V_data_V_1_sel_wr & M_AXIS_V_data_V_1_state_cmp_full);

assign M_AXIS_V_data_V_1_load_B = (M_AXIS_V_data_V_1_state_cmp_full & M_AXIS_V_data_V_1_sel_wr);

assign M_AXIS_V_data_V_1_sel = M_AXIS_V_data_V_1_sel_rd;

assign M_AXIS_V_data_V_1_state_cmp_full = ((M_AXIS_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_data_V_1_vld_out = M_AXIS_V_data_V_1_state[1'd0];

assign M_AXIS_V_dest_V_1_ack_in = M_AXIS_V_dest_V_1_state[1'd1];

assign M_AXIS_V_dest_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_dest_V_1_load_A = (~M_AXIS_V_dest_V_1_sel_wr & M_AXIS_V_dest_V_1_state_cmp_full);

assign M_AXIS_V_dest_V_1_load_B = (M_AXIS_V_dest_V_1_state_cmp_full & M_AXIS_V_dest_V_1_sel_wr);

assign M_AXIS_V_dest_V_1_sel = M_AXIS_V_dest_V_1_sel_rd;

assign M_AXIS_V_dest_V_1_state_cmp_full = ((M_AXIS_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_dest_V_1_vld_out = M_AXIS_V_dest_V_1_state[1'd0];

assign M_AXIS_V_id_V_1_ack_in = M_AXIS_V_id_V_1_state[1'd1];

assign M_AXIS_V_id_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_id_V_1_load_A = (~M_AXIS_V_id_V_1_sel_wr & M_AXIS_V_id_V_1_state_cmp_full);

assign M_AXIS_V_id_V_1_load_B = (M_AXIS_V_id_V_1_state_cmp_full & M_AXIS_V_id_V_1_sel_wr);

assign M_AXIS_V_id_V_1_sel = M_AXIS_V_id_V_1_sel_rd;

assign M_AXIS_V_id_V_1_state_cmp_full = ((M_AXIS_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_id_V_1_vld_out = M_AXIS_V_id_V_1_state[1'd0];

assign M_AXIS_V_keep_V_1_ack_in = M_AXIS_V_keep_V_1_state[1'd1];

assign M_AXIS_V_keep_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_keep_V_1_load_A = (~M_AXIS_V_keep_V_1_sel_wr & M_AXIS_V_keep_V_1_state_cmp_full);

assign M_AXIS_V_keep_V_1_load_B = (M_AXIS_V_keep_V_1_state_cmp_full & M_AXIS_V_keep_V_1_sel_wr);

assign M_AXIS_V_keep_V_1_sel = M_AXIS_V_keep_V_1_sel_rd;

assign M_AXIS_V_keep_V_1_state_cmp_full = ((M_AXIS_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_keep_V_1_vld_out = M_AXIS_V_keep_V_1_state[1'd0];

assign M_AXIS_V_last_V_1_ack_in = M_AXIS_V_last_V_1_state[1'd1];

assign M_AXIS_V_last_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_last_V_1_load_A = (~M_AXIS_V_last_V_1_sel_wr & M_AXIS_V_last_V_1_state_cmp_full);

assign M_AXIS_V_last_V_1_load_B = (M_AXIS_V_last_V_1_state_cmp_full & M_AXIS_V_last_V_1_sel_wr);

assign M_AXIS_V_last_V_1_sel = M_AXIS_V_last_V_1_sel_rd;

assign M_AXIS_V_last_V_1_state_cmp_full = ((M_AXIS_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_last_V_1_vld_out = M_AXIS_V_last_V_1_state[1'd0];

assign M_AXIS_V_strb_V_1_ack_in = M_AXIS_V_strb_V_1_state[1'd1];

assign M_AXIS_V_strb_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_strb_V_1_load_A = (~M_AXIS_V_strb_V_1_sel_wr & M_AXIS_V_strb_V_1_state_cmp_full);

assign M_AXIS_V_strb_V_1_load_B = (M_AXIS_V_strb_V_1_state_cmp_full & M_AXIS_V_strb_V_1_sel_wr);

assign M_AXIS_V_strb_V_1_sel = M_AXIS_V_strb_V_1_sel_rd;

assign M_AXIS_V_strb_V_1_state_cmp_full = ((M_AXIS_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_strb_V_1_vld_out = M_AXIS_V_strb_V_1_state[1'd0];

assign M_AXIS_V_user_V_1_ack_in = M_AXIS_V_user_V_1_state[1'd1];

assign M_AXIS_V_user_V_1_ack_out = M_AXIS_TREADY;

assign M_AXIS_V_user_V_1_load_A = (~M_AXIS_V_user_V_1_sel_wr & M_AXIS_V_user_V_1_state_cmp_full);

assign M_AXIS_V_user_V_1_load_B = (M_AXIS_V_user_V_1_state_cmp_full & M_AXIS_V_user_V_1_sel_wr);

assign M_AXIS_V_user_V_1_sel = M_AXIS_V_user_V_1_sel_rd;

assign M_AXIS_V_user_V_1_state_cmp_full = ((M_AXIS_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign M_AXIS_V_user_V_1_vld_out = M_AXIS_V_user_V_1_state[1'd0];

assign S_AXIS_TREADY = S_AXIS_V_dest_V_0_state[1'd1];

assign S_AXIS_V_data_V_0_ack_in = S_AXIS_V_data_V_0_state[1'd1];

assign S_AXIS_V_data_V_0_load_A = (~S_AXIS_V_data_V_0_sel_wr & S_AXIS_V_data_V_0_state_cmp_full);

assign S_AXIS_V_data_V_0_load_B = (S_AXIS_V_data_V_0_state_cmp_full & S_AXIS_V_data_V_0_sel_wr);

assign S_AXIS_V_data_V_0_sel = S_AXIS_V_data_V_0_sel_rd;

assign S_AXIS_V_data_V_0_state_cmp_full = ((S_AXIS_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign S_AXIS_V_data_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_data_V_0_vld_out = S_AXIS_V_data_V_0_state[1'd0];

assign S_AXIS_V_dest_V_0_ack_in = S_AXIS_V_dest_V_0_state[1'd1];

assign S_AXIS_V_dest_V_0_load_A = (~S_AXIS_V_dest_V_0_sel_wr & S_AXIS_V_dest_V_0_state_cmp_full);

assign S_AXIS_V_dest_V_0_load_B = (S_AXIS_V_dest_V_0_state_cmp_full & S_AXIS_V_dest_V_0_sel_wr);

assign S_AXIS_V_dest_V_0_sel = S_AXIS_V_dest_V_0_sel_rd;

assign S_AXIS_V_dest_V_0_state_cmp_full = ((S_AXIS_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign S_AXIS_V_dest_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_dest_V_0_vld_out = S_AXIS_V_dest_V_0_state[1'd0];

assign S_AXIS_V_id_V_0_ack_in = S_AXIS_V_id_V_0_state[1'd1];

assign S_AXIS_V_id_V_0_load_A = (~S_AXIS_V_id_V_0_sel_wr & S_AXIS_V_id_V_0_state_cmp_full);

assign S_AXIS_V_id_V_0_load_B = (S_AXIS_V_id_V_0_state_cmp_full & S_AXIS_V_id_V_0_sel_wr);

assign S_AXIS_V_id_V_0_sel = S_AXIS_V_id_V_0_sel_rd;

assign S_AXIS_V_id_V_0_state_cmp_full = ((S_AXIS_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign S_AXIS_V_id_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_id_V_0_vld_out = S_AXIS_V_id_V_0_state[1'd0];

assign S_AXIS_V_keep_V_0_ack_in = S_AXIS_V_keep_V_0_state[1'd1];

assign S_AXIS_V_keep_V_0_load_A = (~S_AXIS_V_keep_V_0_sel_wr & S_AXIS_V_keep_V_0_state_cmp_full);

assign S_AXIS_V_keep_V_0_load_B = (S_AXIS_V_keep_V_0_state_cmp_full & S_AXIS_V_keep_V_0_sel_wr);

assign S_AXIS_V_keep_V_0_sel = S_AXIS_V_keep_V_0_sel_rd;

assign S_AXIS_V_keep_V_0_state_cmp_full = ((S_AXIS_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign S_AXIS_V_keep_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_keep_V_0_vld_out = S_AXIS_V_keep_V_0_state[1'd0];

assign S_AXIS_V_strb_V_0_ack_in = S_AXIS_V_strb_V_0_state[1'd1];

assign S_AXIS_V_strb_V_0_load_A = (~S_AXIS_V_strb_V_0_sel_wr & S_AXIS_V_strb_V_0_state_cmp_full);

assign S_AXIS_V_strb_V_0_load_B = (S_AXIS_V_strb_V_0_state_cmp_full & S_AXIS_V_strb_V_0_sel_wr);

assign S_AXIS_V_strb_V_0_sel = S_AXIS_V_strb_V_0_sel_rd;

assign S_AXIS_V_strb_V_0_state_cmp_full = ((S_AXIS_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign S_AXIS_V_strb_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_strb_V_0_vld_out = S_AXIS_V_strb_V_0_state[1'd0];

assign S_AXIS_V_user_V_0_ack_in = S_AXIS_V_user_V_0_state[1'd1];

assign S_AXIS_V_user_V_0_load_A = (~S_AXIS_V_user_V_0_sel_wr & S_AXIS_V_user_V_0_state_cmp_full);

assign S_AXIS_V_user_V_0_load_B = (S_AXIS_V_user_V_0_state_cmp_full & S_AXIS_V_user_V_0_sel_wr);

assign S_AXIS_V_user_V_0_sel = S_AXIS_V_user_V_0_sel_rd;

assign S_AXIS_V_user_V_0_state_cmp_full = ((S_AXIS_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign S_AXIS_V_user_V_0_vld_in = S_AXIS_TVALID;

assign S_AXIS_V_user_V_0_vld_out = S_AXIS_V_user_V_0_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state6 = ((1'b0 == M_AXIS_V_dest_V_1_ack_in) | (1'b0 == M_AXIS_V_id_V_1_ack_in) | (1'b0 == M_AXIS_V_last_V_1_ack_in) | (1'b0 == M_AXIS_V_user_V_1_ack_in) | (1'b0 == M_AXIS_V_strb_V_1_ack_in) | (1'b0 == M_AXIS_V_keep_V_1_ack_in) | (1'b0 == M_AXIS_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_293_p2 = ((i_reg_237 == 17'd65536) ? 1'b1 : 1'b0);

assign exitcond_fu_335_p2 = ((i_1_reg_260 == 17'd65536) ? 1'b1 : 1'b0);

assign grp_bitonic_sort_fu_271_ap_start = grp_bitonic_sort_fu_271_ap_start_reg;

assign i_2_fu_299_p2 = (i_reg_237 + 17'd1);

assign i_3_fu_341_p2 = (i_1_reg_260 + 17'd1);

assign indvarinc_fu_276_p2 = (invdar_reg_161 + 16'd1);

assign tmp_1_fu_330_p1 = i_reg_237;

assign tmp_2_fu_347_p1 = i_1_reg_260;

assign tmp_3_fu_352_p2 = ((i_1_reg_260 == 17'd65535) ? 1'b1 : 1'b0);

assign tmp_fu_282_p1 = invdar_reg_161;

assign tmp_last_V_fu_358_p2 = (val_4_reg_249 | tmp_3_fu_352_p2);

assign tmp_s_fu_287_p2 = ((invdar_reg_161 == 16'd65535) ? 1'b1 : 1'b0);

endmodule //HLS_sort
